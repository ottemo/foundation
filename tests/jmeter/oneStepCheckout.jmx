<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="2.8" jmeter="2.13 r1665067">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL</stringProp>
            <stringProp name="Argument.value">http://192.168.56.101:3000</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="Define Visitors" enabled="false">
        <stringProp name="scriptLanguage">javascript</stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">// see http://www.generatedata.com/

var visitorsList = [
	{&quot;first_name&quot;: &quot;Amery&quot;, &quot;last_name&quot;: &quot;Woodard&quot;, &quot;birthday&quot;: &quot;1964-09-28&quot;, &quot;email&quot;: &quot;tortor.at.risus@CuraePhasellus.org&quot;, &quot;company&quot;: &quot;Tellus Imperdiet Consulting&quot;},
	{&quot;first_name&quot;: &quot;Thomas&quot;, &quot;last_name&quot;: &quot;Meyer&quot;, &quot;birthday&quot;: &quot;1993-07-08&quot;, &quot;email&quot;: &quot;condimentum.Donec@sem.org&quot;, &quot;company&quot;: &quot;Blandit Mattis Limited&quot;},
	{&quot;first_name&quot;: &quot;Urielle&quot;, &quot;last_name&quot;: &quot;Strickland&quot;, &quot;birthday&quot;: &quot;1973-11-15&quot;, &quot;email&quot;: &quot;dignissim.lacus.Aliquam@tristiquesenectus.org&quot;, &quot;company&quot;: &quot;Convallis Inc.&quot;},
	{&quot;first_name&quot;: &quot;Tatyana&quot;, &quot;last_name&quot;: &quot;Day&quot;, &quot;birthday&quot;: &quot;1984-10-30&quot;, &quot;email&quot;: &quot;cursus.diam@risusMorbi.edu&quot;, &quot;company&quot;: &quot;Tincidunt Institute&quot;},
	{&quot;first_name&quot;: &quot;Darryl&quot;, &quot;last_name&quot;: &quot;Torres&quot;, &quot;birthday&quot;: &quot;1974-10-17&quot;, &quot;email&quot;: &quot;consectetuer.adipiscing.elit@aenimSuspendisse.edu&quot;, &quot;company&quot;: &quot;Sapien Aenean Massa Consulting&quot;},
	{&quot;first_name&quot;: &quot;Felicia&quot;, &quot;last_name&quot;: &quot;Neal&quot;, &quot;birthday&quot;: &quot;1995-03-06&quot;, &quot;email&quot;: &quot;et.ultrices@Crasconvallis.co.uk&quot;, &quot;company&quot;: &quot;Mi Pede Industries&quot;},
	{&quot;first_name&quot;: &quot;Adrian&quot;, &quot;last_name&quot;: &quot;Gray&quot;, &quot;birthday&quot;: &quot;1951-08-28&quot;, &quot;email&quot;: &quot;nunc@Nunclaoreet.edu&quot;, &quot;company&quot;: &quot;Varius Orci Company&quot;},
	{&quot;first_name&quot;: &quot;Jenna&quot;, &quot;last_name&quot;: &quot;Perry&quot;, &quot;birthday&quot;: &quot;1959-01-06&quot;, &quot;email&quot;: &quot;Aliquam.auctor@Sedpharetra.net&quot;, &quot;company&quot;: &quot;Natoque Corp.&quot;},
	{&quot;first_name&quot;: &quot;Mariko&quot;, &quot;last_name&quot;: &quot;Sanders&quot;, &quot;birthday&quot;: &quot;1997-08-30&quot;, &quot;email&quot;: &quot;ipsum.nunc.id@sit.org&quot;, &quot;company&quot;: &quot;Dolor Quisque LLP&quot;},
	{&quot;first_name&quot;: &quot;Nomlanga&quot;, &quot;last_name&quot;: &quot;Burgess&quot;, &quot;birthday&quot;: &quot;1966-07-17&quot;, &quot;email&quot;: &quot;Suspendisse.dui@risus.com&quot;, &quot;company&quot;: &quot;Egestas Inc.&quot;},
	{&quot;first_name&quot;: &quot;Rylee&quot;, &quot;last_name&quot;: &quot;Luna&quot;, &quot;birthday&quot;: &quot;1972-06-19&quot;, &quot;email&quot;: &quot;tellus@sem.com&quot;, &quot;company&quot;: &quot;Semper Pretium Incorporated&quot;},
	{&quot;first_name&quot;: &quot;Nolan&quot;, &quot;last_name&quot;: &quot;Fry&quot;, &quot;birthday&quot;: &quot;1943-05-18&quot;, &quot;email&quot;: &quot;In.scelerisque.scelerisque@Donecnibh.edu&quot;, &quot;company&quot;: &quot;Cum LLP&quot;},
	{&quot;first_name&quot;: &quot;Fitzgerald&quot;, &quot;last_name&quot;: &quot;Kane&quot;, &quot;birthday&quot;: &quot;1959-02-21&quot;, &quot;email&quot;: &quot;lobortis.augue.scelerisque@ettristiquepellentesque.org&quot;, &quot;company&quot;: &quot;Nascetur Ridiculus LLP&quot;},
	{&quot;first_name&quot;: &quot;Kyra&quot;, &quot;last_name&quot;: &quot;Woodward&quot;, &quot;birthday&quot;: &quot;1954-04-16&quot;, &quot;email&quot;: &quot;imperdiet.nec.leo@habitantmorbitristique.ca&quot;, &quot;company&quot;: &quot;Suspendisse Aliquet Sem Institute&quot;},
	{&quot;first_name&quot;: &quot;Emery&quot;, &quot;last_name&quot;: &quot;Parks&quot;, &quot;birthday&quot;: &quot;1975-09-06&quot;, &quot;email&quot;: &quot;pede.et@necmollis.edu&quot;, &quot;company&quot;: &quot;Nunc PC&quot;},
	{&quot;first_name&quot;: &quot;Tasha&quot;, &quot;last_name&quot;: &quot;Key&quot;, &quot;birthday&quot;: &quot;1976-10-29&quot;, &quot;email&quot;: &quot;Integer@Duis.org&quot;, &quot;company&quot;: &quot;Purus Institute&quot;},
	{&quot;first_name&quot;: &quot;Asher&quot;, &quot;last_name&quot;: &quot;Blackwell&quot;, &quot;birthday&quot;: &quot;1945-11-10&quot;, &quot;email&quot;: &quot;faucibus.orci@DuisgravidaPraesent.org&quot;, &quot;company&quot;: &quot;Bibendum Donec LLC&quot;},
	{&quot;first_name&quot;: &quot;Russell&quot;, &quot;last_name&quot;: &quot;Bruce&quot;, &quot;birthday&quot;: &quot;1978-10-20&quot;, &quot;email&quot;: &quot;nibh@Phasellusnulla.org&quot;, &quot;company&quot;: &quot;Enim Curabitur Massa Corp.&quot;},
	{&quot;first_name&quot;: &quot;Rachel&quot;, &quot;last_name&quot;: &quot;Kane&quot;, &quot;birthday&quot;: &quot;1989-07-28&quot;, &quot;email&quot;: &quot;ligula@sit.net&quot;, &quot;company&quot;: &quot;Justo Proin Non Corp.&quot;},
	{&quot;first_name&quot;: &quot;Linda&quot;, &quot;last_name&quot;: &quot;Mcmillan&quot;, &quot;birthday&quot;: &quot;1999-03-02&quot;, &quot;email&quot;: &quot;neque.tellus@Suspendissealiquet.co.uk&quot;, &quot;company&quot;: &quot;Lobortis Ultrices Associates&quot;},
	{&quot;first_name&quot;: &quot;Wendy&quot;, &quot;last_name&quot;: &quot;Faulkner&quot;, &quot;birthday&quot;: &quot;1986-05-24&quot;, &quot;email&quot;: &quot;cursus.purus@sedsapien.co.uk&quot;, &quot;company&quot;: &quot;Ipsum Nunc Consulting&quot;},
	{&quot;first_name&quot;: &quot;Basil&quot;, &quot;last_name&quot;: &quot;Hicks&quot;, &quot;birthday&quot;: &quot;1988-07-09&quot;, &quot;email&quot;: &quot;nec@justo.edu&quot;, &quot;company&quot;: &quot;Velit Sed LLP&quot;},
	{&quot;first_name&quot;: &quot;Alyssa&quot;, &quot;last_name&quot;: &quot;Bartlett&quot;, &quot;birthday&quot;: &quot;1950-11-09&quot;, &quot;email&quot;: &quot;amet.lorem@enimsit.net&quot;, &quot;company&quot;: &quot;Lorem Ipsum Dolor Inc.&quot;},
	{&quot;first_name&quot;: &quot;Vladimir&quot;, &quot;last_name&quot;: &quot;Frank&quot;, &quot;birthday&quot;: &quot;1950-04-28&quot;, &quot;email&quot;: &quot;in@ligula.edu&quot;, &quot;company&quot;: &quot;Mauris Corporation&quot;},
	{&quot;first_name&quot;: &quot;Rama&quot;, &quot;last_name&quot;: &quot;Banks&quot;, &quot;birthday&quot;: &quot;1990-11-15&quot;, &quot;email&quot;: &quot;vitae.mauris.sit@auguemalesuada.ca&quot;, &quot;company&quot;: &quot;Arcu Aliquam Ultrices Incorporated&quot;},
	{&quot;first_name&quot;: &quot;Odysseus&quot;, &quot;last_name&quot;: &quot;Burks&quot;, &quot;birthday&quot;: &quot;1999-02-05&quot;, &quot;email&quot;: &quot;ut.ipsum@lacus.com&quot;, &quot;company&quot;: &quot;Nisi Nibh Industries&quot;},
	{&quot;first_name&quot;: &quot;Sylvia&quot;, &quot;last_name&quot;: &quot;Terry&quot;, &quot;birthday&quot;: &quot;1967-07-14&quot;, &quot;email&quot;: &quot;lacus@vitaealiquam.edu&quot;, &quot;company&quot;: &quot;Et Nunc Inc.&quot;},
	{&quot;first_name&quot;: &quot;Aurelia&quot;, &quot;last_name&quot;: &quot;Giles&quot;, &quot;birthday&quot;: &quot;1988-11-01&quot;, &quot;email&quot;: &quot;eu.ultrices@Duissit.com&quot;, &quot;company&quot;: &quot;Vehicula Risus Industries&quot;},
	{&quot;first_name&quot;: &quot;Nerea&quot;, &quot;last_name&quot;: &quot;Woodard&quot;, &quot;birthday&quot;: &quot;1977-06-09&quot;, &quot;email&quot;: &quot;id.magna@loremvehiculaet.ca&quot;, &quot;company&quot;: &quot;Donec Luctus Inc.&quot;},
	{&quot;first_name&quot;: &quot;Nell&quot;, &quot;last_name&quot;: &quot;Mccray&quot;, &quot;birthday&quot;: &quot;1993-07-08&quot;, &quot;email&quot;: &quot;sem@molestiepharetranibh.co.uk&quot;, &quot;company&quot;: &quot;Quisque Purus LLC&quot;},
	{&quot;first_name&quot;: &quot;Illiana&quot;, &quot;last_name&quot;: &quot;Rose&quot;, &quot;birthday&quot;: &quot;1995-04-20&quot;, &quot;email&quot;: &quot;egestas.ligula.Nullam@Suspendisseacmetus.ca&quot;, &quot;company&quot;: &quot;Erat PC&quot;},
	{&quot;first_name&quot;: &quot;Cameran&quot;, &quot;last_name&quot;: &quot;Briggs&quot;, &quot;birthday&quot;: &quot;1969-10-17&quot;, &quot;email&quot;: &quot;ut@ornareFuscemollis.com&quot;, &quot;company&quot;: &quot;Est Institute&quot;},
	{&quot;first_name&quot;: &quot;Marvin&quot;, &quot;last_name&quot;: &quot;Downs&quot;, &quot;birthday&quot;: &quot;1942-09-18&quot;, &quot;email&quot;: &quot;tellus@adipiscingfringilla.com&quot;, &quot;company&quot;: &quot;Lorem Donec Elementum Incorporated&quot;},
	{&quot;first_name&quot;: &quot;Shelly&quot;, &quot;last_name&quot;: &quot;Monroe&quot;, &quot;birthday&quot;: &quot;1965-06-13&quot;, &quot;email&quot;: &quot;ullamcorper@utmolestiein.com&quot;, &quot;company&quot;: &quot;Ac Libero Inc.&quot;},
	{&quot;first_name&quot;: &quot;Katell&quot;, &quot;last_name&quot;: &quot;Todd&quot;, &quot;birthday&quot;: &quot;1979-10-04&quot;, &quot;email&quot;: &quot;ornare@natoquepenatibuset.com&quot;, &quot;company&quot;: &quot;Nunc Sit Institute&quot;},
	{&quot;first_name&quot;: &quot;Dacey&quot;, &quot;last_name&quot;: &quot;Lawrence&quot;, &quot;birthday&quot;: &quot;1978-11-09&quot;, &quot;email&quot;: &quot;mauris.Integer@euodiotristique.ca&quot;, &quot;company&quot;: &quot;Elit Consulting&quot;},
	{&quot;first_name&quot;: &quot;Nina&quot;, &quot;last_name&quot;: &quot;Barber&quot;, &quot;birthday&quot;: &quot;1969-03-07&quot;, &quot;email&quot;: &quot;nec@magna.co.uk&quot;, &quot;company&quot;: &quot;Elit Sed Consequat LLP&quot;},
	{&quot;first_name&quot;: &quot;Hayley&quot;, &quot;last_name&quot;: &quot;Fox&quot;, &quot;birthday&quot;: &quot;1962-12-15&quot;, &quot;email&quot;: &quot;turpis.In@risusQuisquelibero.co.uk&quot;, &quot;company&quot;: &quot;A Purus Duis Associates&quot;},
	{&quot;first_name&quot;: &quot;Aaron&quot;, &quot;last_name&quot;: &quot;Lott&quot;, &quot;birthday&quot;: &quot;1957-03-28&quot;, &quot;email&quot;: &quot;dolor.quam.elementum@felispurus.co.uk&quot;, &quot;company&quot;: &quot;At Ltd&quot;},
	{&quot;first_name&quot;: &quot;Cassidy&quot;, &quot;last_name&quot;: &quot;Turner&quot;, &quot;birthday&quot;: &quot;1993-03-06&quot;, &quot;email&quot;: &quot;metus.urna.convallis@uteros.net&quot;, &quot;company&quot;: &quot;Pede Blandit Congue Corporation&quot;},
	{&quot;first_name&quot;: &quot;Halla&quot;, &quot;last_name&quot;: &quot;Aguirre&quot;, &quot;birthday&quot;: &quot;1995-12-17&quot;, &quot;email&quot;: &quot;eu.arcu.Morbi@ridiculus.edu&quot;, &quot;company&quot;: &quot;Luctus Consulting&quot;},
	{&quot;first_name&quot;: &quot;Maggie&quot;, &quot;last_name&quot;: &quot;Rocha&quot;, &quot;birthday&quot;: &quot;1958-10-23&quot;, &quot;email&quot;: &quot;Praesent.eu.dui@erosnon.com&quot;, &quot;company&quot;: &quot;Ullamcorper Viverra Maecenas Limited&quot;},
	{&quot;first_name&quot;: &quot;Justine&quot;, &quot;last_name&quot;: &quot;Lloyd&quot;, &quot;birthday&quot;: &quot;1963-03-26&quot;, &quot;email&quot;: &quot;est@vitae.net&quot;, &quot;company&quot;: &quot;Euismod Institute&quot;},
	{&quot;first_name&quot;: &quot;Brenna&quot;, &quot;last_name&quot;: &quot;Gill&quot;, &quot;birthday&quot;: &quot;1971-03-05&quot;, &quot;email&quot;: &quot;Aenean.eget@sapien.net&quot;, &quot;company&quot;: &quot;Arcu Associates&quot;},
	{&quot;first_name&quot;: &quot;Victoria&quot;, &quot;last_name&quot;: &quot;Massey&quot;, &quot;birthday&quot;: &quot;1956-07-24&quot;, &quot;email&quot;: &quot;Fusce@Aliquamrutrumlorem.net&quot;, &quot;company&quot;: &quot;Semper Tellus Institute&quot;},
	{&quot;first_name&quot;: &quot;Tasha&quot;, &quot;last_name&quot;: &quot;Rodgers&quot;, &quot;birthday&quot;: &quot;1998-08-25&quot;, &quot;email&quot;: &quot;ipsum@ullamcorper.org&quot;, &quot;company&quot;: &quot;Fusce Feugiat Ltd&quot;},
	{&quot;first_name&quot;: &quot;Jade&quot;, &quot;last_name&quot;: &quot;Ramsey&quot;, &quot;birthday&quot;: &quot;1966-12-24&quot;, &quot;email&quot;: &quot;lobortis@massaQuisqueporttitor.co.uk&quot;, &quot;company&quot;: &quot;Ut Nulla Institute&quot;},
	{&quot;first_name&quot;: &quot;Noble&quot;, &quot;last_name&quot;: &quot;Pierce&quot;, &quot;birthday&quot;: &quot;1968-07-17&quot;, &quot;email&quot;: &quot;augue.Sed@Integer.com&quot;, &quot;company&quot;: &quot;Quis Company&quot;},
	{&quot;first_name&quot;: &quot;Randall&quot;, &quot;last_name&quot;: &quot;Henderson&quot;, &quot;birthday&quot;: &quot;1951-12-14&quot;, &quot;email&quot;: &quot;egestas@maurissapien.org&quot;, &quot;company&quot;: &quot;Sed Auctor Associates&quot;},
	{&quot;first_name&quot;: &quot;Howard&quot;, &quot;last_name&quot;: &quot;Nunez&quot;, &quot;birthday&quot;: &quot;1948-10-29&quot;, &quot;email&quot;: &quot;et.netus.et@montes.edu&quot;, &quot;company&quot;: &quot;Mauris Ipsum Porta Associates&quot;},
	{&quot;first_name&quot;: &quot;Priscilla&quot;, &quot;last_name&quot;: &quot;Perry&quot;, &quot;birthday&quot;: &quot;1950-05-19&quot;, &quot;email&quot;: &quot;Quisque.ornare@odiosempercursus.edu&quot;, &quot;company&quot;: &quot;Parturient Montes Nascetur Corp.&quot;},
	{&quot;first_name&quot;: &quot;Kelly&quot;, &quot;last_name&quot;: &quot;Dodson&quot;, &quot;birthday&quot;: &quot;1943-07-27&quot;, &quot;email&quot;: &quot;ipsum.primis.in@Phasellusvitae.org&quot;, &quot;company&quot;: &quot;Tellus Non Magna LLP&quot;},
	{&quot;first_name&quot;: &quot;Amelia&quot;, &quot;last_name&quot;: &quot;Beck&quot;, &quot;birthday&quot;: &quot;1966-02-24&quot;, &quot;email&quot;: &quot;mi.Duis@facilisis.edu&quot;, &quot;company&quot;: &quot;Duis Mi Industries&quot;},
	{&quot;first_name&quot;: &quot;Maya&quot;, &quot;last_name&quot;: &quot;Church&quot;, &quot;birthday&quot;: &quot;1984-06-29&quot;, &quot;email&quot;: &quot;auctor.velit.eget@consequatlectus.edu&quot;, &quot;company&quot;: &quot;Fusce Fermentum Institute&quot;},
	{&quot;first_name&quot;: &quot;Merrill&quot;, &quot;last_name&quot;: &quot;Owen&quot;, &quot;birthday&quot;: &quot;1952-03-17&quot;, &quot;email&quot;: &quot;amet.ultricies@Duis.org&quot;, &quot;company&quot;: &quot;Lobortis Quam LLC&quot;},
	{&quot;first_name&quot;: &quot;Tyler&quot;, &quot;last_name&quot;: &quot;Diaz&quot;, &quot;birthday&quot;: &quot;1991-12-09&quot;, &quot;email&quot;: &quot;dolor.elit@turpisIncondimentum.net&quot;, &quot;company&quot;: &quot;Sagittis Company&quot;},
	{&quot;first_name&quot;: &quot;Basia&quot;, &quot;last_name&quot;: &quot;Golden&quot;, &quot;birthday&quot;: &quot;1986-04-27&quot;, &quot;email&quot;: &quot;Mauris.nulla.Integer@Sed.co.uk&quot;, &quot;company&quot;: &quot;Elit Industries&quot;},
	{&quot;first_name&quot;: &quot;Quin&quot;, &quot;last_name&quot;: &quot;Santos&quot;, &quot;birthday&quot;: &quot;1985-04-22&quot;, &quot;email&quot;: &quot;neque@dictum.org&quot;, &quot;company&quot;: &quot;Dolor Elit Pellentesque Consulting&quot;},
	{&quot;first_name&quot;: &quot;Indigo&quot;, &quot;last_name&quot;: &quot;Robertson&quot;, &quot;birthday&quot;: &quot;1949-02-02&quot;, &quot;email&quot;: &quot;Donec.non@Maurisnondui.org&quot;, &quot;company&quot;: &quot;Libero Ltd&quot;},
	{&quot;first_name&quot;: &quot;Lucian&quot;, &quot;last_name&quot;: &quot;Buckley&quot;, &quot;birthday&quot;: &quot;1961-08-19&quot;, &quot;email&quot;: &quot;enim.Suspendisse@velfaucibusid.co.uk&quot;, &quot;company&quot;: &quot;Diam Sed Diam Ltd&quot;},
	{&quot;first_name&quot;: &quot;Denton&quot;, &quot;last_name&quot;: &quot;Dawson&quot;, &quot;birthday&quot;: &quot;1992-06-09&quot;, &quot;email&quot;: &quot;ipsum@Nullamenim.net&quot;, &quot;company&quot;: &quot;Ac Eleifend Limited&quot;},
	{&quot;first_name&quot;: &quot;Melodie&quot;, &quot;last_name&quot;: &quot;Haney&quot;, &quot;birthday&quot;: &quot;1950-02-22&quot;, &quot;email&quot;: &quot;penatibus.et@pedeetrisus.ca&quot;, &quot;company&quot;: &quot;Nonummy Corporation&quot;},
	{&quot;first_name&quot;: &quot;Hiram&quot;, &quot;last_name&quot;: &quot;Payne&quot;, &quot;birthday&quot;: &quot;1953-08-23&quot;, &quot;email&quot;: &quot;Ut.nec@elitfermentum.com&quot;, &quot;company&quot;: &quot;Nunc Commodo LLC&quot;},
	{&quot;first_name&quot;: &quot;Dorian&quot;, &quot;last_name&quot;: &quot;Garrison&quot;, &quot;birthday&quot;: &quot;1961-09-11&quot;, &quot;email&quot;: &quot;pellentesque.a@posuere.co.uk&quot;, &quot;company&quot;: &quot;Metus Facilisis LLC&quot;},
	{&quot;first_name&quot;: &quot;Jakeem&quot;, &quot;last_name&quot;: &quot;Mclean&quot;, &quot;birthday&quot;: &quot;1978-03-13&quot;, &quot;email&quot;: &quot;Sed@semconsequatnec.co.uk&quot;, &quot;company&quot;: &quot;Convallis Ligula Associates&quot;},
	{&quot;first_name&quot;: &quot;Blair&quot;, &quot;last_name&quot;: &quot;Pacheco&quot;, &quot;birthday&quot;: &quot;1966-12-15&quot;, &quot;email&quot;: &quot;porttitor@mattissemperdui.edu&quot;, &quot;company&quot;: &quot;Quisque LLP&quot;},
	{&quot;first_name&quot;: &quot;Philip&quot;, &quot;last_name&quot;: &quot;Lindsey&quot;, &quot;birthday&quot;: &quot;1949-06-08&quot;, &quot;email&quot;: &quot;nisi@egestasAliquam.com&quot;, &quot;company&quot;: &quot;Feugiat Placerat Velit Corp.&quot;},
	{&quot;first_name&quot;: &quot;Hadley&quot;, &quot;last_name&quot;: &quot;Murphy&quot;, &quot;birthday&quot;: &quot;1990-01-29&quot;, &quot;email&quot;: &quot;et.nunc.Quisque@euismodin.ca&quot;, &quot;company&quot;: &quot;Cursus Corporation&quot;},
	{&quot;first_name&quot;: &quot;Sacha&quot;, &quot;last_name&quot;: &quot;Oliver&quot;, &quot;birthday&quot;: &quot;1958-07-08&quot;, &quot;email&quot;: &quot;ullamcorper.velit.in@tristique.co.uk&quot;, &quot;company&quot;: &quot;Dui Suspendisse Inc.&quot;},
	{&quot;first_name&quot;: &quot;Scarlett&quot;, &quot;last_name&quot;: &quot;Roy&quot;, &quot;birthday&quot;: &quot;1963-11-10&quot;, &quot;email&quot;: &quot;Donec.sollicitudin.adipiscing@nonegestasa.org&quot;, &quot;company&quot;: &quot;Odio Foundation&quot;},
	{&quot;first_name&quot;: &quot;Deborah&quot;, &quot;last_name&quot;: &quot;Welch&quot;, &quot;birthday&quot;: &quot;1949-07-05&quot;, &quot;email&quot;: &quot;sollicitudin.commodo@nisiMaurisnulla.ca&quot;, &quot;company&quot;: &quot;Lorem Ipsum Dolor Inc.&quot;},
	{&quot;first_name&quot;: &quot;Olga&quot;, &quot;last_name&quot;: &quot;Bright&quot;, &quot;birthday&quot;: &quot;1981-01-28&quot;, &quot;email&quot;: &quot;fringilla.porttitor.vulputate@orciluctus.co.uk&quot;, &quot;company&quot;: &quot;Nam Interdum Enim Associates&quot;},
	{&quot;first_name&quot;: &quot;Henry&quot;, &quot;last_name&quot;: &quot;Calderon&quot;, &quot;birthday&quot;: &quot;1960-10-02&quot;, &quot;email&quot;: &quot;Aliquam@arcuMorbi.com&quot;, &quot;company&quot;: &quot;Sagittis Duis Associates&quot;},
	{&quot;first_name&quot;: &quot;Richard&quot;, &quot;last_name&quot;: &quot;Bentley&quot;, &quot;birthday&quot;: &quot;1957-06-30&quot;, &quot;email&quot;: &quot;odio.Etiam@dolor.net&quot;, &quot;company&quot;: &quot;Hendrerit Donec Porttitor Corporation&quot;},
	{&quot;first_name&quot;: &quot;Kenneth&quot;, &quot;last_name&quot;: &quot;Shaffer&quot;, &quot;birthday&quot;: &quot;1955-08-12&quot;, &quot;email&quot;: &quot;adipiscing.ligula.Aenean@euultrices.org&quot;, &quot;company&quot;: &quot;Vestibulum Foundation&quot;},
	{&quot;first_name&quot;: &quot;Kenyon&quot;, &quot;last_name&quot;: &quot;Goodman&quot;, &quot;birthday&quot;: &quot;1954-12-01&quot;, &quot;email&quot;: &quot;dolor.sit.amet@est.net&quot;, &quot;company&quot;: &quot;Aliquam PC&quot;},
	{&quot;first_name&quot;: &quot;Maggie&quot;, &quot;last_name&quot;: &quot;Vance&quot;, &quot;birthday&quot;: &quot;1999-12-18&quot;, &quot;email&quot;: &quot;Pellentesque.tincidunt.tempus@etultrices.org&quot;, &quot;company&quot;: &quot;Enim Incorporated&quot;},
	{&quot;first_name&quot;: &quot;Judah&quot;, &quot;last_name&quot;: &quot;Stewart&quot;, &quot;birthday&quot;: &quot;1951-08-07&quot;, &quot;email&quot;: &quot;dolor.Fusce@liberoDonec.com&quot;, &quot;company&quot;: &quot;Ipsum Curabitur Consulting&quot;},
	{&quot;first_name&quot;: &quot;Iola&quot;, &quot;last_name&quot;: &quot;Hancock&quot;, &quot;birthday&quot;: &quot;1995-12-02&quot;, &quot;email&quot;: &quot;aliquet@Nunclaoreet.org&quot;, &quot;company&quot;: &quot;Molestie Associates&quot;},
	{&quot;first_name&quot;: &quot;Ruth&quot;, &quot;last_name&quot;: &quot;Hebert&quot;, &quot;birthday&quot;: &quot;1997-12-10&quot;, &quot;email&quot;: &quot;ante.Maecenas@orciUtsagittis.net&quot;, &quot;company&quot;: &quot;Dui Augue Eu LLP&quot;},
	{&quot;first_name&quot;: &quot;Rafael&quot;, &quot;last_name&quot;: &quot;Mullins&quot;, &quot;birthday&quot;: &quot;1972-09-13&quot;, &quot;email&quot;: &quot;metus@consectetueradipiscing.com&quot;, &quot;company&quot;: &quot;Nec Imperdiet Company&quot;},
	{&quot;first_name&quot;: &quot;Cooper&quot;, &quot;last_name&quot;: &quot;Bauer&quot;, &quot;birthday&quot;: &quot;1961-04-13&quot;, &quot;email&quot;: &quot;enim@lobortis.com&quot;, &quot;company&quot;: &quot;Nisl Maecenas Malesuada Limited&quot;},
	{&quot;first_name&quot;: &quot;Marcia&quot;, &quot;last_name&quot;: &quot;Sharpe&quot;, &quot;birthday&quot;: &quot;1967-08-24&quot;, &quot;email&quot;: &quot;malesuada.malesuada@Ut.ca&quot;, &quot;company&quot;: &quot;Vel Vulputate Eu Corporation&quot;},
	{&quot;first_name&quot;: &quot;Hiram&quot;, &quot;last_name&quot;: &quot;Hickman&quot;, &quot;birthday&quot;: &quot;1987-02-11&quot;, &quot;email&quot;: &quot;et.lacinia@arcuSed.net&quot;, &quot;company&quot;: &quot;Tempus Risus Donec Associates&quot;},
	{&quot;first_name&quot;: &quot;Shelley&quot;, &quot;last_name&quot;: &quot;Keith&quot;, &quot;birthday&quot;: &quot;1972-09-11&quot;, &quot;email&quot;: &quot;accumsan.sed.facilisis@ametluctusvulputate.org&quot;, &quot;company&quot;: &quot;Enim Non Nisi Institute&quot;},
	{&quot;first_name&quot;: &quot;Claudia&quot;, &quot;last_name&quot;: &quot;Sims&quot;, &quot;birthday&quot;: &quot;1953-12-04&quot;, &quot;email&quot;: &quot;ipsum.Phasellus.vitae@dictum.com&quot;, &quot;company&quot;: &quot;Diam Inc.&quot;},
	{&quot;first_name&quot;: &quot;Emmanuel&quot;, &quot;last_name&quot;: &quot;Velazquez&quot;, &quot;birthday&quot;: &quot;1975-10-01&quot;, &quot;email&quot;: &quot;eu.ultrices@sollicitudina.org&quot;, &quot;company&quot;: &quot;Sem Nulla Ltd&quot;},
	{&quot;first_name&quot;: &quot;Flynn&quot;, &quot;last_name&quot;: &quot;Sosa&quot;, &quot;birthday&quot;: &quot;1963-08-01&quot;, &quot;email&quot;: &quot;lobortis.risus@vitaedolor.ca&quot;, &quot;company&quot;: &quot;Aenean Massa Integer LLC&quot;},
	{&quot;first_name&quot;: &quot;Cameran&quot;, &quot;last_name&quot;: &quot;Steele&quot;, &quot;birthday&quot;: &quot;1964-12-16&quot;, &quot;email&quot;: &quot;Sed@liberoatauctor.com&quot;, &quot;company&quot;: &quot;Fusce LLC&quot;},
	{&quot;first_name&quot;: &quot;Maile&quot;, &quot;last_name&quot;: &quot;Yates&quot;, &quot;birthday&quot;: &quot;1962-03-06&quot;, &quot;email&quot;: &quot;nec@nibh.net&quot;, &quot;company&quot;: &quot;Non Sollicitudin Corp.&quot;},
	{&quot;first_name&quot;: &quot;Erich&quot;, &quot;last_name&quot;: &quot;Marks&quot;, &quot;birthday&quot;: &quot;1966-12-09&quot;, &quot;email&quot;: &quot;Nullam.enim@nec.org&quot;, &quot;company&quot;: &quot;Ut Institute&quot;},
	{&quot;first_name&quot;: &quot;Stephen&quot;, &quot;last_name&quot;: &quot;Pruitt&quot;, &quot;birthday&quot;: &quot;1953-03-28&quot;, &quot;email&quot;: &quot;et@iaculisquis.co.uk&quot;, &quot;company&quot;: &quot;Facilisis Lorem Inc.&quot;},
	{&quot;first_name&quot;: &quot;Ryder&quot;, &quot;last_name&quot;: &quot;Walls&quot;, &quot;birthday&quot;: &quot;1968-01-26&quot;, &quot;email&quot;: &quot;tincidunt@metusAliquam.com&quot;, &quot;company&quot;: &quot;Lorem Tristique Aliquet Industries&quot;},
	{&quot;first_name&quot;: &quot;Celeste&quot;, &quot;last_name&quot;: &quot;Mullen&quot;, &quot;birthday&quot;: &quot;1986-11-25&quot;, &quot;email&quot;: &quot;lacinia.orci@ornaretortorat.org&quot;, &quot;company&quot;: &quot;Elit Dictum PC&quot;},
	{&quot;first_name&quot;: &quot;Veda&quot;, &quot;last_name&quot;: &quot;Hawkins&quot;, &quot;birthday&quot;: &quot;1997-12-07&quot;, &quot;email&quot;: &quot;erat.Etiam@liberoet.org&quot;, &quot;company&quot;: &quot;Tellus Imperdiet LLP&quot;},
	{&quot;first_name&quot;: &quot;Keiko&quot;, &quot;last_name&quot;: &quot;Christian&quot;, &quot;birthday&quot;: &quot;1967-01-25&quot;, &quot;email&quot;: &quot;lacus@ametconsectetuer.co.uk&quot;, &quot;company&quot;: &quot;Ultrices Vivamus Inc.&quot;},
	{&quot;first_name&quot;: &quot;Virginia&quot;, &quot;last_name&quot;: &quot;Justice&quot;, &quot;birthday&quot;: &quot;1959-09-06&quot;, &quot;email&quot;: &quot;eu.enim.Etiam@Curabiturvel.ca&quot;, &quot;company&quot;: &quot;Duis Inc.&quot;},
	{&quot;first_name&quot;: &quot;Ella&quot;, &quot;last_name&quot;: &quot;Cole&quot;, &quot;birthday&quot;: &quot;1973-09-10&quot;, &quot;email&quot;: &quot;litora.torquent@Aeneangravidanunc.co.uk&quot;, &quot;company&quot;: &quot;Tincidunt Orci Quis Corporation&quot;},
	{&quot;first_name&quot;: &quot;Ebony&quot;, &quot;last_name&quot;: &quot;Christian&quot;, &quot;birthday&quot;: &quot;1960-06-03&quot;, &quot;email&quot;: &quot;fermentum.risus@blandit.org&quot;, &quot;company&quot;: &quot;Velit In Aliquet Ltd&quot;},
	{&quot;first_name&quot;: &quot;Hyatt&quot;, &quot;last_name&quot;: &quot;Stevens&quot;, &quot;birthday&quot;: &quot;1963-10-23&quot;, &quot;email&quot;: &quot;Cras.dictum.ultricies@loremipsum.co.uk&quot;, &quot;company&quot;: &quot;Et LLC&quot;}
];

vars.putObject(&quot;VISITORS&quot;, visitorsList);</stringProp>
      </BSFPreProcessor>
      <hashTree/>
      <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="Define Addresses" enabled="true">
        <stringProp name="scriptLanguage">javascript</stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">// see http://names.igopaygo.com/street/north_american_address

var addressesList = [
	{&apos;state&apos;: &apos;MN&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(952) 948-1441&apos;, &apos;address&apos;: &apos;1002 Fallen Pine Mount&apos;,       &apos;city:&apos;: &apos;Dewy Rose&apos;},
	{&apos;state&apos;: &apos;MN&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(612) 429-6440&apos;, &apos;address&apos;: &apos;1071 Misty Beach&apos;,             &apos;city:&apos;: &apos;Stinking Bay&apos;},
	{&apos;state&apos;: &apos;NU&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(867) 426-8270&apos;, &apos;address&apos;: &apos;1215 Crystal Creek Downs&apos;,     &apos;city:&apos;: &apos;Mosquitoville&apos;},
	{&apos;state&apos;: &apos;YK&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(867) 167-5173&apos;, &apos;address&apos;: &apos;1487 Amber Hills Via&apos;,         &apos;city:&apos;: &apos;Skyforest&apos;},
	{&apos;state&apos;: &apos;NW&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(867) 282-9299&apos;, &apos;address&apos;: &apos;1511 Wishing Subdivision&apos;,     &apos;city:&apos;: &apos;Coteau Beach&apos;},
	{&apos;state&apos;: &apos;NJ&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(551) 863-0975&apos;, &apos;address&apos;: &apos;155 Dewy Autumn Hill&apos;,         &apos;city:&apos;: &apos;Spillcorn&apos;},
	{&apos;state&apos;: &apos;PE&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(902) 589-4756&apos;, &apos;address&apos;: &apos;1700 High Fox Centre&apos;,         &apos;city:&apos;: &apos;Crumpecker&apos;},
	{&apos;state&apos;: &apos;MN&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(320) 340-0367&apos;, &apos;address&apos;: &apos;1814 Gentle Bend&apos;,             &apos;city:&apos;: &apos;Carnation&apos;},
	{&apos;state&apos;: &apos;NM&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(505) 125-8118&apos;, &apos;address&apos;: &apos;183 Middle By-pass&apos;,           &apos;city:&apos;: &apos;Cleveland&apos;},
	{&apos;state&apos;: &apos;ND&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(701) 186-6076&apos;, &apos;address&apos;: &apos;1905 Bright Campus&apos;,           &apos;city:&apos;: &apos;Panther&apos;},
	{&apos;state&apos;: &apos;QC&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(819) 525-7336&apos;, &apos;address&apos;: &apos;1913 Misty Shadow Circle&apos;,     &apos;city:&apos;: &apos;Monks Misery&apos;},
	{&apos;state&apos;: &apos;SK&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(306) 286-2779&apos;, &apos;address&apos;: &apos;193 Little Autumn Circle&apos;,     &apos;city:&apos;: &apos;Sour Lake&apos;},
	{&apos;state&apos;: &apos;MI&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(734) 183-1987&apos;, &apos;address&apos;: &apos;1946 Easy Campus&apos;,             &apos;city:&apos;: &apos;Allgood&apos;},
	{&apos;state&apos;: &apos;OK&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(918) 748-4716&apos;, &apos;address&apos;: &apos;2051 Round Arbor&apos;,             &apos;city:&apos;: &apos;Cabbage Town&apos;},
	{&apos;state&apos;: &apos;ON&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(289) 404-0909&apos;, &apos;address&apos;: &apos;2107 Shady Embers End&apos;,        &apos;city:&apos;: &apos;Zinzer&apos;},
	{&apos;state&apos;: &apos;OH&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(234) 059-4227&apos;, &apos;address&apos;: &apos;2190 Old Cloud Close&apos;,         &apos;city:&apos;: &apos;Chopawamsic&apos;},
	{&apos;state&apos;: &apos;AL&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(256) 733-0602&apos;, &apos;address&apos;: &apos;2301 Iron Trail&apos;,              &apos;city:&apos;: &apos;Replete&apos;},
	{&apos;state&apos;: &apos;NC&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(910) 305-9304&apos;, &apos;address&apos;: &apos;2318 Lazy Elk Village&apos;,        &apos;city:&apos;: &apos;Markinch&apos;},
	{&apos;state&apos;: &apos;TN&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(423) 322-1098&apos;, &apos;address&apos;: &apos;2456 Rustic Park&apos;,             &apos;city:&apos;: &apos;New London&apos;},
	{&apos;state&apos;: &apos;MT&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(406) 622-4263&apos;, &apos;address&apos;: &apos;2551 Umber Blossom Round&apos;,     &apos;city:&apos;: &apos;Folly&apos;},
	{&apos;state&apos;: &apos;NC&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(828) 091-4007&apos;, &apos;address&apos;: &apos;2815 Crystal Corner&apos;,          &apos;city:&apos;: &apos;Starbuckville&apos;},
	{&apos;state&apos;: &apos;MI&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(906) 541-9661&apos;, &apos;address&apos;: &apos;2891 Noble Bank&apos;,              &apos;city:&apos;: &apos;Gallup&apos;},
	{&apos;state&apos;: &apos;NJ&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(201) 180-4723&apos;, &apos;address&apos;: &apos;2899 Emerald Pioneer Isle&apos;,    &apos;city:&apos;: &apos;Winnipeg Beach&apos;},
	{&apos;state&apos;: &apos;OR&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(503) 859-0470&apos;, &apos;address&apos;: &apos;3008 Bright Zephyr Edge&apos;,      &apos;city:&apos;: &apos;Fish Street&apos;},
	{&apos;state&apos;: &apos;NE&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(402) 002-5396&apos;, &apos;address&apos;: &apos;3027 Cinder Fawn Wood&apos;,        &apos;city:&apos;: &apos;Lipton&apos;},
	{&apos;state&apos;: &apos;MA&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(781) 635-5368&apos;, &apos;address&apos;: &apos;3070 Golden Meadow&apos;,           &apos;city:&apos;: &apos;Warroad&apos;},
	{&apos;state&apos;: &apos;OH&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(330) 445-5847&apos;, &apos;address&apos;: &apos;3201 Cozy Rise&apos;,               &apos;city:&apos;: &apos;Bengough&apos;},
	{&apos;state&apos;: &apos;AB&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(780) 070-3125&apos;, &apos;address&apos;: &apos;3205 Grand Grove&apos;,             &apos;city:&apos;: &apos;Willacoochee&apos;},
	{&apos;state&apos;: &apos;SC&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(864) 149-3282&apos;, &apos;address&apos;: &apos;3276 Velvet Timber Downs&apos;,     &apos;city:&apos;: &apos;Beehunter&apos;},
	{&apos;state&apos;: &apos;WV&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(304) 547-6917&apos;, &apos;address&apos;: &apos;3432 Green Jetty&apos;,             &apos;city:&apos;: &apos;Comeby&apos;},
	{&apos;state&apos;: &apos;ON&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(613) 956-1285&apos;, &apos;address&apos;: &apos;3550 Pleasant Pioneer Knoll&apos;,  &apos;city:&apos;: &apos;Windsor&apos;},
	{&apos;state&apos;: &apos;AK&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(907) 429-4405&apos;, &apos;address&apos;: &apos;3666 Green Pines&apos;,             &apos;city:&apos;: &apos;Ocean Spray&apos;},
	{&apos;state&apos;: &apos;HI&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(808) 367-9265&apos;, &apos;address&apos;: &apos;3745 Quiet River Gardens&apos;,     &apos;city:&apos;: &apos;Omemee&apos;},
	{&apos;state&apos;: &apos;SK&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(306) 595-0513&apos;, &apos;address&apos;: &apos;389 Broad Deer Pike&apos;,          &apos;city:&apos;: &apos;Keen-Wik&apos;},
	{&apos;state&apos;: &apos;NV&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(775) 831-9292&apos;, &apos;address&apos;: &apos;4001 Umber Concession&apos;,        &apos;city:&apos;: &apos;Hushpuckena&apos;},
	{&apos;state&apos;: &apos;RI&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(401) 821-2552&apos;, &apos;address&apos;: &apos;4096 Foggy Leaf Ledge&apos;,        &apos;city:&apos;: &apos;Ronkonkoma&apos;},
	{&apos;state&apos;: &apos;IL&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(618) 064-2748&apos;, &apos;address&apos;: &apos;4139 Indian Lake Range&apos;,       &apos;city:&apos;: &apos;Niwot&apos;},
	{&apos;state&apos;: &apos;WA&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(509) 060-9779&apos;, &apos;address&apos;: &apos;4219 Jagged Way&apos;,              &apos;city:&apos;: &apos;Story&apos;},
	{&apos;state&apos;: &apos;NM&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(575) 952-2159&apos;, &apos;address&apos;: &apos;4421 Pleasant Pond Orchard&apos;,   &apos;city:&apos;: &apos;Hanna&apos;},
	{&apos;state&apos;: &apos;AL&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(205) 806-5609&apos;, &apos;address&apos;: &apos;4471 Hazy Square&apos;,             &apos;city:&apos;: &apos;Pitrodie&apos;},
	{&apos;state&apos;: &apos;SK&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(306) 266-8085&apos;, &apos;address&apos;: &apos;4496 Rustic Impasse&apos;,          &apos;city:&apos;: &apos;Meeteetse&apos;},
	{&apos;state&apos;: &apos;NW&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(867) 715-8592&apos;, &apos;address&apos;: &apos;4582 Cozy Cider Key&apos;,          &apos;city:&apos;: &apos;Meota&apos;},
	{&apos;state&apos;: &apos;ID&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(208) 760-4705&apos;, &apos;address&apos;: &apos;4599 Rocky Boulevard&apos;,         &apos;city:&apos;: &apos;Shanty Town&apos;},
	{&apos;state&apos;: &apos;WI&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(414) 135-7107&apos;, &apos;address&apos;: &apos;4706 Round Common&apos;,            &apos;city:&apos;: &apos;Dot Lake&apos;},
	{&apos;state&apos;: &apos;NB&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(506) 511-6878&apos;, &apos;address&apos;: &apos;471 Heather Bear Byway&apos;,       &apos;city:&apos;: &apos;Barnstable&apos;},
	{&apos;state&apos;: &apos;MN&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(320) 803-6530&apos;, &apos;address&apos;: &apos;4727 Heather Bay&apos;,             &apos;city:&apos;: &apos;Zenon Park&apos;},
	{&apos;state&apos;: &apos;NY&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(631) 303-3169&apos;, &apos;address&apos;: &apos;4781 Fallen Orchard&apos;,          &apos;city:&apos;: &apos;Little Indian&apos;},
	{&apos;state&apos;: &apos;NB&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(506) 931-5801&apos;, &apos;address&apos;: &apos;5005 Iron Route&apos;,              &apos;city:&apos;: &apos;Little Black&apos;},
	{&apos;state&apos;: &apos;NC&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(910) 277-1627&apos;, &apos;address&apos;: &apos;511 Dusty Grove Farm&apos;,         &apos;city:&apos;: &apos;Pigeon Roost&apos;},
	{&apos;state&apos;: &apos;OK&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(539) 115-5462&apos;, &apos;address&apos;: &apos;5133 Clear Creek Front&apos;,       &apos;city:&apos;: &apos;Flat Nose&apos;},
	{&apos;state&apos;: &apos;OH&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(740) 872-9855&apos;, &apos;address&apos;: &apos;5479 Thunder Glade&apos;,           &apos;city:&apos;: &apos;Belgium&apos;},
	{&apos;state&apos;: &apos;NS&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(902) 868-0880&apos;, &apos;address&apos;: &apos;5480 Quiet Island By-pass&apos;,    &apos;city:&apos;: &apos;South Bruce Peninsula&apos;},
	{&apos;state&apos;: &apos;TX&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(940) 247-9963&apos;, &apos;address&apos;: &apos;5507 Emerald Gate Subdivision&apos;,&apos;city:&apos;: &apos;Leatherman&apos;},
	{&apos;state&apos;: &apos;SD&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(605) 931-6917&apos;, &apos;address&apos;: &apos;5524 Lazy Willow Arbor&apos;,       &apos;city:&apos;: &apos;Widowville&apos;},
	{&apos;state&apos;: &apos;OH&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(330) 503-7730&apos;, &apos;address&apos;: &apos;5526 Quaking Dale Cape&apos;,       &apos;city:&apos;: &apos;Possession&apos;},
	{&apos;state&apos;: &apos;NS&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(902) 426-5129&apos;, &apos;address&apos;: &apos;5608 Velvet Jetty&apos;,            &apos;city:&apos;: &apos;Loco Hills&apos;},
	{&apos;state&apos;: &apos;WY&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(307) 472-8979&apos;, &apos;address&apos;: &apos;5867 Rocky View Line&apos;,         &apos;city:&apos;: &apos;Joy Haven&apos;},
	{&apos;state&apos;: &apos;MS&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(769) 414-9224&apos;, &apos;address&apos;: &apos;5990 Dusty Crescent&apos;,          &apos;city:&apos;: &apos;Tick Bite&apos;},
	{&apos;state&apos;: &apos;WA&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(509) 453-6969&apos;, &apos;address&apos;: &apos;6125 Burning Quail Grounds&apos;,   &apos;city:&apos;: &apos;Nummytown&apos;},
	{&apos;state&apos;: &apos;LA&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(337) 021-9595&apos;, &apos;address&apos;: &apos;6456 Stony Oak Path&apos;,          &apos;city:&apos;: &apos;Chugiak&apos;},
	{&apos;state&apos;: &apos;WV&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(681) 576-0744&apos;, &apos;address&apos;: &apos;651 Red Place&apos;,                &apos;city:&apos;: &apos;Pot Neck&apos;},
	{&apos;state&apos;: &apos;NE&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(308) 465-0427&apos;, &apos;address&apos;: &apos;6734 Blue Stead&apos;,              &apos;city:&apos;: &apos;Bountiful&apos;},
	{&apos;state&apos;: &apos;RI&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(401) 231-1523&apos;, &apos;address&apos;: &apos;6802 Lost Embers Wood&apos;,        &apos;city:&apos;: &apos;Bonus&apos;},
	{&apos;state&apos;: &apos;WA&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(360) 160-1528&apos;, &apos;address&apos;: &apos;6810 Golden Goose Heath&apos;,      &apos;city:&apos;: &apos;Amherst&apos;},
	{&apos;state&apos;: &apos;SK&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(306) 627-8097&apos;, &apos;address&apos;: &apos;6892 Noble Elk Turnabout&apos;,     &apos;city:&apos;: &apos;Time&apos;},
	{&apos;state&apos;: &apos;AB&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(780) 312-9541&apos;, &apos;address&apos;: &apos;6945 Silent Pony Forest&apos;,      &apos;city:&apos;: &apos;Leross&apos;},
	{&apos;state&apos;: &apos;NH&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(603) 146-9055&apos;, &apos;address&apos;: &apos;6963 Broad Branch Bay&apos;,        &apos;city:&apos;: &apos;Undercliff&apos;},
	{&apos;state&apos;: &apos;MO&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(314) 385-3215&apos;, &apos;address&apos;: &apos;7142 Tawny Glen&apos;,              &apos;city:&apos;: &apos;Poor&apos;},
	{&apos;state&apos;: &apos;KS&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(913) 098-5738&apos;, &apos;address&apos;: &apos;7202 Lost Concession&apos;,         &apos;city:&apos;: &apos;Dipple&apos;},
	{&apos;state&apos;: &apos;WA&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(206) 465-4401&apos;, &apos;address&apos;: &apos;7232 Jagged Plaza&apos;,            &apos;city:&apos;: &apos;Deloraine&apos;},
	{&apos;state&apos;: &apos;NY&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(516) 735-9185&apos;, &apos;address&apos;: &apos;7249 Gentle Lagoon Glen&apos;,      &apos;city:&apos;: &apos;Gringo&apos;},
	{&apos;state&apos;: &apos;VT&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(802) 779-3164&apos;, &apos;address&apos;: &apos;7441 Cotton Nook&apos;,             &apos;city:&apos;: &apos;Ronkonkoma&apos;},
	{&apos;state&apos;: &apos;NM&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(505) 913-1548&apos;, &apos;address&apos;: &apos;7466 Dewy Dale&apos;,               &apos;city:&apos;: &apos;Mannix&apos;},
	{&apos;state&apos;: &apos;NU&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(867) 322-3225&apos;, &apos;address&apos;: &apos;7513 Silent Wharf&apos;,            &apos;city:&apos;: &apos;Toadtown&apos;},
	{&apos;state&apos;: &apos;SK&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(306) 866-3384&apos;, &apos;address&apos;: &apos;7516 Tawny Falls&apos;,             &apos;city:&apos;: &apos;Happy Corner&apos;},
	{&apos;state&apos;: &apos;ID&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(208) 838-7237&apos;, &apos;address&apos;: &apos;7684 Sleepy Beacon Ramp&apos;,      &apos;city:&apos;: &apos;Ashtabula&apos;},
	{&apos;state&apos;: &apos;MN&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(952) 050-6838&apos;, &apos;address&apos;: &apos;7790 Cinder Oak Terrace&apos;,      &apos;city:&apos;: &apos;Nitta Yuma&apos;},
	{&apos;state&apos;: &apos;SK&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(306) 039-7283&apos;, &apos;address&apos;: &apos;7904 Silver Expressway&apos;,       &apos;city:&apos;: &apos;White Settlement&apos;},
	{&apos;state&apos;: &apos;IA&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(515) 681-4573&apos;, &apos;address&apos;: &apos;7923 Thunder Wharf&apos;,           &apos;city:&apos;: &apos;Stephenville&apos;},
	{&apos;state&apos;: &apos;SC&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(843) 784-9115&apos;, &apos;address&apos;: &apos;8286 Colonial Prairie Drive&apos;,  &apos;city:&apos;: &apos;Prettyboy Garth&apos;},
	{&apos;state&apos;: &apos;NM&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(575) 617-0593&apos;, &apos;address&apos;: &apos;8432 Cotton Shadow Vale&apos;,      &apos;city:&apos;: &apos;Effort&apos;},
	{&apos;state&apos;: &apos;NH&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(603) 750-1572&apos;, &apos;address&apos;: &apos;8502 Merry Plaza&apos;,             &apos;city:&apos;: &apos;Golightly&apos;},
	{&apos;state&apos;: &apos;NS&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(902) 696-6395&apos;, &apos;address&apos;: &apos;8721 Wishing Hills Autoroute&apos;, &apos;city:&apos;: &apos;Minton&apos;},
	{&apos;state&apos;: &apos;WY&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(307) 544-4987&apos;, &apos;address&apos;: &apos;8798 Sunny Run&apos;,               &apos;city:&apos;: &apos;Bucksnort&apos;},
	{&apos;state&apos;: &apos;NB&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(506) 580-7883&apos;, &apos;address&apos;: &apos;8799 Honey Ramp&apos;,              &apos;city:&apos;: &apos;Cashtown&apos;},
	{&apos;state&apos;: &apos;SC&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(803) 126-7032&apos;, &apos;address&apos;: &apos;8819 Grand Farm&apos;,              &apos;city:&apos;: &apos;Moonshine&apos;},
	{&apos;state&apos;: &apos;AL&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(334) 767-1470&apos;, &apos;address&apos;: &apos;885 Easy Towers&apos;,              &apos;city:&apos;: &apos;Giants Neck&apos;},
	{&apos;state&apos;: &apos;BC&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(604) 080-2855&apos;, &apos;address&apos;: &apos;8928 Blue Vista&apos;,              &apos;city:&apos;: &apos;Tehachapi&apos;},
	{&apos;state&apos;: &apos;VA&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(540) 664-4962&apos;, &apos;address&apos;: &apos;9017 Harvest Brook Moor&apos;,      &apos;city:&apos;: &apos;Dukedom&apos;},
	{&apos;state&apos;: &apos;NC&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(828) 498-2947&apos;, &apos;address&apos;: &apos;9120 Sleepy Panda Wynd&apos;,       &apos;city:&apos;: &apos;Handshoe&apos;},
	{&apos;state&apos;: &apos;NU&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(867) 765-6837&apos;, &apos;address&apos;: &apos;9554 Indian View&apos;,             &apos;city:&apos;: &apos;Ball Play&apos;},
	{&apos;state&apos;: &apos;NV&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(775) 572-3482&apos;, &apos;address&apos;: &apos;9660 Silver Ridge&apos;,            &apos;city:&apos;: &apos;Fenwood&apos;},
	{&apos;state&apos;: &apos;NV&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(702) 431-0307&apos;, &apos;address&apos;: &apos;9666 Hidden Sky Abbey&apos;,        &apos;city:&apos;: &apos;Consumers&apos;},
	{&apos;state&apos;: &apos;IL&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(847) 852-6979&apos;, &apos;address&apos;: &apos;9756 Burning Leaf Estates&apos;,    &apos;city:&apos;: &apos;Snapfinger&apos;},
	{&apos;state&apos;: &apos;TX&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(210) 508-7617&apos;, &apos;address&apos;: &apos;9853 Red Corners&apos;,             &apos;city:&apos;: &apos;Redwine&apos;},
	{&apos;state&apos;: &apos;TX&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(903) 323-5277&apos;, &apos;address&apos;: &apos;9882 High Falls&apos;,              &apos;city:&apos;: &apos;Pennyhill&apos;},
	{&apos;state&apos;: &apos;KY&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(859) 464-0054&apos;, &apos;address&apos;: &apos;9887 Quaking Mall &apos;,           &apos;city:&apos;: &apos;Round O&apos;},
	{&apos;state&apos;: &apos;NM&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(505) 007-5212&apos;, &apos;address&apos;: &apos;990 Little Walk&apos;,              &apos;city:&apos;: &apos;Climax Springs&apos;},
	{&apos;state&apos;: &apos;NS&apos;, &apos;country&apos;: &apos;CA&apos;, &apos;phone&apos;: &apos;(902) 297-3899&apos;, &apos;address&apos;: &apos;990 Old Canyon&apos;,               &apos;city:&apos;: &apos;Montreal&apos;},
	{&apos;state&apos;: &apos;HI&apos;, &apos;country&apos;: &apos;US&apos;, &apos;phone&apos;: &apos;(808) 556-4507&apos;, &apos;address&apos;: &apos;993 Foggy Mountain Private&apos;,   &apos;city:&apos;: &apos;Two Taverns&apos;},
];

vars.putObject(&quot;ADDRESSES&quot;, addressesList);</stringProp>
      </BSFPreProcessor>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="General" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460362908000</longProp>
        <longProp name="ThreadGroup.end_time">1460362908000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="rts visit" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{path: &quot;test-page-1&quot;, referrer: &quot;loolge.com&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/rts/visit</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="set json" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Log in (dashboard)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;login&quot;:&quot;admin&quot;, &quot;password&quot;:&quot;123&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/app/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Log in (storefront)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;email&quot;:&quot;admin&quot;, &quot;password&quot;:&quot;123&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/visit/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get visit" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/visit</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Test1" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1411374640000</longProp>
        <longProp name="ThreadGroup.end_time">1411374640000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="rts visit" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{path: &quot;test-page-1&quot;, referrer: &quot;loolge.com&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/rts/visit</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="set json" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get visit" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/visit</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Log in (storefront)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;email&quot;:&quot;admin&quot;, &quot;password&quot;:&quot;123&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/visit/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get visit" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/visit</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get products" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/products</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="set json" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="get products handler" enabled="true">
          <stringProp name="scriptLanguage">javascript</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] == null) {
	var productsList = JSON.stringify(response[&quot;result&quot;]);
	vars.putObject(&quot;products&quot;, productsList);
	// ${__threadNum}
}
</stringProp>
        </BSFPostProcessor>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get random product" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/product/${product_id}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="set json" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="find one random" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
var productsList = JSON.parse(vars.get(&quot;products&quot;));
var product = productsList[getRandomInt(0, productsList.length)];
vars.putObject(&quot;product_id&quot;, product[&quot;ID&quot;]);</stringProp>
          </BSFPreProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add to cart" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${options}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/cart/item?pid=${product_id}&amp;qty=${qty}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="set json" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="build options" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

var productsList = JSON.parse(vars.get(&quot;products&quot;));
var product = productsList[getRandomInt(0, productsList.length)];
vars.putObject(&quot;product_id&quot;, product[&quot;ID&quot;]);
vars.putObject(&quot;qty&quot;, 2);
vars.putObject(&quot;options&quot;, 2);</stringProp>
          </BSFPreProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get cart" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/cart</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="set json" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="request/response view" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Test2" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <longProp name="ThreadGroup.start_time">1411374640000</longProp>
        <longProp name="ThreadGroup.end_time">1411374640000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        </CookieManager>
        <hashTree/>
        <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Randomize Visitor and Address (phase1)" enabled="true">
          <stringProp name="scriptLanguage">beanshell</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

import java.util.Random;

rnd = new Random();

//randomizing visitor
min = 1;
max = 100;
random = rnd.nextInt(max - min + 1) + min;

br = new BufferedReader(new FileReader(&quot;./visitor.txt&quot;));

line = &quot;&quot;;
for (x=0; x&lt;random; x++) { line = br.readLine(); }
vars.put(&quot;visitor&quot;, line);

// randimizing address
random = rnd.nextInt(max - min + 1) + min;

br = new BufferedReader(new FileReader(&quot;./address.txt&quot;));

line = &quot;&quot;;
for (x=0; x&lt;random; x++) { line = br.readLine(); }
vars.put(&quot;address&quot;, line);</stringProp>
        </BSFSampler>
        <hashTree/>
        <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Randomize Visitor and Address (phase2)" enabled="true">
          <stringProp name="scriptLanguage">javascript</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">var visitor = JSON.parse(vars.get(&quot;visitor&quot;));
var address = JSON.parse(vars.get(&quot;address&quot;));

vars.putObject(&quot;visitor&quot;, visitor);
vars.putObject(&quot;address&quot;, address);

// OUT.println( JSON.stringify(visitor) );
// OUT.println( JSON.stringify(address) );</stringProp>
        </BSFSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Randomize Product" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/products</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;result&quot;] != null &amp;&amp; response[&quot;result&quot;].length &gt; 0) {
	var result = response[&quot;result&quot;];
	var product = result[ Math.floor((Math.random() * result.length)) ];
	vars.putObject(&quot;productID&quot;, product[&quot;Id&quot;]);
}

// vars.putObject(&quot;productID&quot;, &quot;53cf870c6bc4de480f000007&quot;);</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Product Info" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/product/${productID}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());
vars.putObject(&quot;productInfo&quot;, response[&quot;result&quot;]);</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Randomize Visitor and Address" enabled="false">
          <stringProp name="scriptLanguage">javascript</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">var visitors  = vars.getObject(&quot;VISITORS&quot;);
var addresses = vars.getObject(&quot;ADDRESSES&quot;);

var randomValue = Math.floor((Math.random() * visitors.length));
var visitor = visitors[ randomValue ];

var randomValue = Math.floor((Math.random() * addresses.length));
var address = addresses[ randomValue ];

vars.putObject(&quot;visitor&quot;, visitor);
vars.putObject(&quot;address&quot;, address);

SampleResult.setSuccessful(true)
SampleResult.setResponseMessage(&quot;message&quot;)</stringProp>
        </BSFSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${jsonData}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/visitor/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var visitor = vars.getObject(&quot;visitor&quot;);
var jsonData = {&quot;email&quot;: visitor[&quot;email&quot;], &quot;password&quot;: &quot;123&quot;};
vars.putObject(&quot;jsonData&quot;, JSON.stringify(jsonData));
</stringProp>
          </BSFPreProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

vars.putObject(&quot;logined&quot;, &quot;true&quot;);
if (response[&quot;error&quot;].indexOf(&quot;visitor was not found&quot;) != -1) {
	vars.putObject(&quot;logined&quot;, &quot;false&quot;);
}
</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If not logined" enabled="false">
          <stringProp name="IfController.condition">!${logined}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Root Rights Activate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;login&quot;: &quot;admin&quot;, &quot;password&quot;: &quot;admin&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${BASE_URL}/app/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="New Visitor" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${jsonData}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${BASE_URL}/visitor/create</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var visitor = vars.getObject(&quot;visitor&quot;);
visitor[&quot;password&quot;] = &quot;123&quot;;
delete visitor[&quot;company&quot;];
vars.putObject(&quot;jsonData&quot;, JSON.stringify(visitor));
</stringProp>
            </BSFPreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Root Rights Deactivate" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value"></stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${BASE_URL}/app/logout</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Login 2-nd try" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${jsonData}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${BASE_URL}/visitor/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var visitor = vars.getObject(&quot;visitor&quot;);
var jsonData = {&quot;email&quot;: visitor[&quot;email&quot;], &quot;password&quot;: &quot;123&quot;};
vars.putObject(&quot;jsonData&quot;, JSON.stringify(jsonData));
</stringProp>
            </BSFPreProcessor>
            <hashTree/>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

vars.putObject(&quot;logined&quot;, &quot;true&quot;);
if (response[&quot;error&quot;] != &quot;&quot;) {
	vars.putObject(&quot;logined&quot;, &quot;false&quot;);
}
</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If login success" enabled="false">
          <stringProp name="IfController.condition">${logined}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Visitor Info" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${BASE_URL}/visitor/info</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

vars.putObject(&quot;visitorID&quot;, null);
if (response[&quot;result&quot;] != null) {
	var result = response[&quot;result&quot;];
	vars.putObject(&quot;visitorID&quot;, result[&quot;_id&quot;]);
}
</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Addresses Info" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${BASE_URL}/visitor/address/list</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

vars.putObject(&quot;addressID&quot;, null);
vars.putObject(&quot;addressNotFound&quot;, &quot;true&quot;);
if (response[&quot;result&quot;] != null) {
	var result = response[&quot;result&quot;];
	if (result.length &gt; 0) {
		vars.putObject(&quot;addressID&quot;, result[0][&quot;Id&quot;]);
		vars.putObject(&quot;addressNotFound&quot;, &quot;false&quot;);
	}
}
</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If address not found" enabled="true">
            <stringProp name="IfController.condition">${addressNotFound}</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="New Address" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${jsonData}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${BASE_URL}/visitor/address/create</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var visitor = vars.getObject(&quot;visitor&quot;);
var address = vars.getObject(&quot;address&quot;);
var visitorID = vars.getObject(&quot;visitorID&quot;);

address[&quot;visitor_id&quot;] = String(visitorID);

address[&quot;first_name&quot;] = visitor[&quot;first_name&quot;];
address[&quot;last_name&quot;] = visitor[&quot;last_name&quot;];
address[&quot;company&quot;] = visitor[&quot;company&quot;]; 

address[&quot;address_line1&quot;] = address[&quot;address&quot;];
// delete address[&quot;address&quot;];

vars.putObject(&quot;jsonData&quot;, JSON.stringify(address));
</stringProp>
              </BSFPreProcessor>
              <hashTree/>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

vars.putObject(&quot;addressID&quot;, null);
if (response[&quot;result&quot;] != null) {
	vars.putObject(&quot;addressID&quot;, response[&quot;result&quot;][&quot;_id&quot;]);
}
</stringProp>
              </BSFPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Filling cart with N items" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">3</stringProp>
          </LoopController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Randomize Product" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${BASE_URL}/product/list</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;result&quot;] != null &amp;&amp; response[&quot;result&quot;].length &gt; 0) {
	var result = response[&quot;result&quot;];
	var product = result[ Math.floor((Math.random() * result.length)) ];
	vars.putObject(&quot;productID&quot;, product[&quot;Id&quot;]);
}

// vars.putObject(&quot;productID&quot;, &quot;53cf870c6bc4de480f000007&quot;);</stringProp>
              </BSFPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Product Info" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${BASE_URL}/product/get/${productID}</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());
vars.putObject(&quot;productInfo&quot;, response[&quot;result&quot;]);</stringProp>
              </BSFPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add to Cart" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${jsonData}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain"></stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">${BASE_URL}/cart/add/${productID}/1</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <boolProp name="HTTPSampler.monitor">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var jsonData = {};
vars.putObject(&quot;jsonData&quot;, JSON.stringify(jsonData));

// if product have options, we should check them for required values
var product = vars.getObject(&quot;productInfo&quot;);
if (product != null) {
	// product have options
	if (product[&quot;options&quot;] != null) {
		var productOptions = {};
		
		for (var optionName in product[&quot;options&quot;]) {
			var option = product[&quot;options&quot;][optionName];

			// if some option is required
			if (option != null &amp;&amp; option[&quot;required&quot;] == true) {
				var optionValue = &quot;some value for &quot; + optionName; 

				// if option values are predefined
				if (option[&quot;options&quot;] != null) {
					var valueOptions = Object.keys(option[&quot;options&quot;]);
					var len = valueOptions.length;
					var randomValue = Math.floor((Math.random() * len));
					
					optionValue = valueOptions[randomValue];
				}

				productOptions[optionName] = optionValue;
			}
		}

		// so, if any option was required
		if (Object.keys(productOptions).length &gt; 0) {
			jsonData[&quot;options&quot;] = productOptions;
		}
	}
}
vars.putObject(&quot;jsonData&quot;, JSON.stringify(jsonData));
</stringProp>
              </BSFPreProcessor>
              <hashTree/>
              <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

vars.putObject(&quot;continue&quot;, &quot;true&quot;);
if (response[&quot;error&quot;] != &quot;&quot;) {
	vars.putObject(&quot;continue&quot;, &quot;false&quot;);
}</stringProp>
              </BSFPostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set Shipping Address" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${jsonData}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${BASE_URL}/checkout/set/shipping/address</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var address = {&quot;id&quot;: String(vars.getObject(&quot;addressID&quot;))};
vars.putObject(&quot;jsonData&quot;, JSON.stringify(address));
</stringProp>
            </BSFPreProcessor>
            <hashTree/>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] == null) {
	vars.putObject(&quot;shippingMethod&quot;, &quot;flat_rate&quot;);
	vars.putObject(&quot;shippingRate&quot;, &quot;default&quot;);
}
</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set Billing Address" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${jsonData}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${BASE_URL}/checkout/set/billing/address</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var address = {&quot;id&quot;: String(vars.getObject(&quot;addressID&quot;))};
vars.putObject(&quot;jsonData&quot;, JSON.stringify(address));
</stringProp>
            </BSFPreProcessor>
            <hashTree/>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] == null) {
	vars.putObject(&quot;shippingMethod&quot;, &quot;flat_rate&quot;);
	vars.putObject(&quot;shippingRate&quot;, &quot;default&quot;);
}
</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set Payment Method" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${BASE_URL}/checkout/set/payment/method/checkmo</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] == null) {
	vars.putObject(&quot;paymentMethod&quot;, &quot;checkmo&quot;);
}
</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Set Shipping Method" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${BASE_URL}/checkout/set/shipping/method/flat_rate/default</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] == null) {
	vars.putObject(&quot;shippingMethod&quot;, &quot;flat_rate&quot;);
	vars.putObject(&quot;shippingRate&quot;, &quot;default&quot;);
}
</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Checkout submit" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${BASE_URL}/checkout/submit</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] == null) {
}
</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Visitors" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460380276000</longProp>
        <longProp name="ThreadGroup.end_time">1460380276000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="rts visit" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{path: &quot;test-page-1&quot;, referrer: &quot;loolge.com&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/rts/visit</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="set json" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${jsonData}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/visitors/register</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="generate random visitor" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">function getRandomInt(min, max) {return Math.floor(Math.random() * (max - min + 1)) + min;}
function getPass(length) {	if (!length) {		length = 8;	}
	var charset = &quot;abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;,
	n = charset.length
	result = &quot;&quot;;
	for (var i = 0; i &lt; length; i++) {
		result += charset.charAt(n*Math.random()&lt;&lt;0);
	}
    return result;
}

var domains=[&quot;@example.com&quot;, &quot;@example.org&quot;, &quot;@example.net&quot;]
var names=[&quot;Mack&quot;, &quot;Carlo&quot;, &quot;Luke&quot;, &quot;Isidra&quot;, &quot;Kathline&quot;, &quot;Alonso&quot;, &quot;Wenona&quot;, &quot;Lovetta&quot;, &quot;Yasuko&quot;, &quot;Kathlyn&quot;, &quot;Wei&quot;, &quot;Manuel&quot;, &quot;Maxine&quot;, &quot;Nikia&quot;, &quot;Charita&quot;, &quot;Derick&quot;, &quot;Miesha&quot;, &quot;Vertie&quot;, &quot;Stanford&quot;, &quot;Giuseppe&quot;, &quot;Eldridge&quot;, &quot;Cheree&quot;, &quot;Yolanda&quot;, &quot;Christeen&quot;, &quot;Olive&quot;, &quot;Lavona&quot;, &quot;Shaniqua&quot;, &quot;Rosio&quot;, &quot;Pandora&quot;, &quot;Claris&quot;, &quot;Jose&quot;, &quot;Willis&quot;, &quot;Lady&quot;, &quot;Natacha&quot;, &quot;Cristi&quot;, &quot;Gary&quot;, &quot;Jeanene&quot;, &quot;Esta&quot;, &quot;Delena&quot;, &quot;Suzi&quot;, &quot;Angelique&quot;, &quot;Hyon&quot;, &quot;Shera&quot;, &quot;Malinda&quot;, &quot;Florinda&quot;, &quot;Carry&quot;, &quot;Caroline&quot;, &quot;Evangeline&quot;, &quot;Jeanett&quot;, &quot;Judy&quot;, &quot;Kelley&quot;, &quot;Kimbery&quot;, &quot;Sherwood&quot;, &quot;Christin&quot;, &quot;Felix&quot;, &quot;Collin&quot;, &quot;Makeda&quot;, &quot;Melani&quot;, &quot;Chau&quot;, &quot;Eleni&quot;, &quot;Senaida&quot;, &quot;Jolynn&quot;, &quot;Candace&quot;, &quot;Myrtice&quot;, &quot;Delana&quot;, &quot;Lynell&quot;, &quot;Dave&quot;, &quot;Wan&quot;, &quot;Angelia&quot;, &quot;Leena&quot;, &quot;Stephane&quot;, &quot;Lekisha&quot;, &quot;Carlene&quot;, &quot;Alice&quot;, &quot;Merideth&quot;, &quot;Antony&quot;, &quot;Ginger&quot;, &quot;Jennie&quot;, &quot;Kimber&quot;, &quot;Ai&quot;, &quot;Ladawn&quot;, &quot;Deandrea&quot;, &quot;Alyssa&quot;, &quot;Sommer&quot;, &quot;Mitchel&quot;, &quot;Kesha&quot;, &quot;Dalene&quot;, &quot;Cody&quot;, &quot;Errol&quot;, &quot;Christen&quot;, &quot;Carman&quot;, &quot;Kaye&quot;, &quot;Maximina&quot;, &quot;Alverta&quot;, &quot;Delinda&quot;, &quot;Lurlene&quot;, &quot;Almeda&quot;, &quot;Adelaide&quot;];
var lastNames=[&quot;Moorhouse&quot;, &quot;Casella&quot;, &quot;Leaman&quot;, &quot;Infante&quot;, &quot;Kang&quot;, &quot;Andreotti&quot;, &quot;Weatherspoon&quot;, &quot;Leicht&quot;, &quot;Yowell&quot;, &quot;Kanode&quot;, &quot;Waag&quot;, &quot;Maya&quot;, &quot;Michalik&quot;, &quot;Natera&quot;, &quot;Cueva&quot;, &quot;Delarosa&quot;, &quot;Macey&quot;, &quot;Volpe&quot;, &quot;Staller&quot;, &quot;Gin&quot;, &quot;Espiritu&quot;, &quot;Chivers&quot;, &quot;Yankey&quot;, &quot;Carpenter&quot;, &quot;Okafor&quot;, &quot;Landsman&quot;, &quot;Sheen&quot;, &quot;Rosenfeld&quot;, &quot;Prine&quot;, &quot;Carstensen&quot;, &quot;Jiang&quot;, &quot;Warner&quot;, &quot;Lanterman&quot;, &quot;Nowicki&quot;, &quot;Chittenden&quot;, &quot;Gash&quot;, &quot;Jimerson&quot;, &quot;Edgecomb&quot;, &quot;Demaris&quot;, &quot;Sevigny&quot;, &quot;Ayon&quot;, &quot;Hennis&quot;, &quot;Sapienza&quot;, &quot;Manwaring&quot;, &quot;Faul&quot;, &quot;Crooms&quot;, &quot;Casey&quot;, &quot;Eskridge&quot;, &quot;Julian&quot;, &quot;Jacobsen&quot;, &quot;Knopp&quot;, &quot;Kruger&quot;, &quot;Stoops&quot;, &quot;Conley&quot;, &quot;Fordyce&quot;, &quot;Croce&quot;, &quot;Mccarley&quot;, &quot;Mckeon&quot;, &quot;Check&quot;, &quot;Evitt&quot;, &quot;Schumacher&quot;, &quot;Jacko&quot;, &quot;Catto&quot;, &quot;Mayor&quot;, &quot;Daum&quot;, &quot;Linde&quot;, &quot;Nauman&quot;, &quot;Dempster&quot;, &quot;Wynn&quot;, &quot;Sperry&quot;, &quot;Alvey&quot;, &quot;Larock&quot;, &quot;Stimson&quot;, &quot;Leveque&quot;, &quot;Cassel&quot;, &quot;Abalos&quot;, &quot;Myerson&quot;, &quot;Abe&quot;, &quot;Gillock&quot;, &quot;Jessop&quot;, &quot;Kendra&quot;, &quot;Arebalo&quot;, &quot;Lipinski&quot;, &quot;Doody&quot;, &quot;Acker&quot;, &quot;Schuch&quot;, &quot;Masser&quot;, &quot;Kopecky&quot;, &quot;Devore&quot;, &quot;Cannady&quot;, &quot;Egnor&quot;, &quot;Celestine&quot;, &quot;Cogburn&quot;, &quot;Kissel&quot;, &quot;Mccarron&quot;, &quot;Ables&quot;, &quot;Denney&quot;, &quot;Loh&quot;, &quot;Audette&quot;, &quot;Angers&quot;];

var n = names.length;
var fname = names[n*Math.random()&lt;&lt;0];
n = lastNames.length;
var lname = names[n*Math.random()&lt;&lt;0];
n = 999;
var email = fname + lname + (n*Math.random()&lt;&lt;0) + domains[0];
var password = getPass();
var visitor = {
	&quot;fname&quot;: fname,
	&quot;lname&quot;: lname,
	&quot;email&quot;: email,
	&quot;password&quot;: password
};
vars.putObject(&quot;email&quot;, email);
vars.putObject(&quot;password&quot;, password);
vars.putObject(&quot;visitor&quot;, JSON.stringify(visitor));
vars.putObject(&quot;jsonData&quot;, JSON.stringify(visitor));
// {&quot;email&quot;: &quot;${email}&quot;,&quot;password&quot;: &quot;${password}&quot;,&quot;fname&quot;: &quot;${fname}&quot;,&quot;lname&quot;: &quot;${lname}&quot;}
// {&quot;facebook_id&quot;:&quot;&quot;,&quot;google_id&quot;:&quot;&quot;,&quot;email&quot;:&quot;b@i.ua&quot;,&quot;fname&quot;:&quot;A&quot;,&quot;lname&quot;:&quot;B&quot;,&quot;password&quot;:&quot;123123123&quot;}
</stringProp>
          </BSFPreProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="save visitor" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] == null) {
	var visitorSaved = response[&quot;result&quot;];
	vars.putObject(&quot;visitorS&quot;, JSON.stringify(visitorSaved));

	var visitorID = visitorSaved[&quot;_id&quot;] || visitorSaved[&quot;id&quot;];
	vars.putObject(&quot;visitor_id&quot;, visitorID);
}</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="error handler" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] != null) {
	OUT.println(&quot;visitor, error - &quot;+ JSON.stringify(response[&quot;error&quot;])+&quot;, in thread - &quot;+ ${__threadNum});
}</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Log out (storefront)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/visit/logout</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="error handler" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] != null) {
	OUT.println(&quot;visitor, error - &quot;+ JSON.stringify(response[&quot;error&quot;])+&quot;, in thread - &quot;+ ${__threadNum});
}</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Log in (storefront)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;email&quot;: &quot;${email}&quot;,&quot;password&quot;: &quot;${password}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/visit/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="error handler" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] != null) {
	OUT.println(&quot;visitor, error - &quot;+ JSON.stringify(response[&quot;error&quot;])+&quot;, in thread - &quot;+ ${__threadNum});
}</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get visitor info" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/visit</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

vars.putObject(&quot;visitorID&quot;, null);
if (response[&quot;result&quot;] != null) {
	var result = response[&quot;result&quot;];
	vars.putObject(&quot;visitorID&quot;, result[&quot;_id&quot;]);
}
// /visitor/:visitorID</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="error handler" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] != null) {
	OUT.println(&quot;visitor, error - &quot;+ JSON.stringify(response[&quot;error&quot;])+&quot;, in thread - &quot;+ ${__threadNum});
}</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Products and Cart" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460363812000</longProp>
        <longProp name="ThreadGroup.end_time">1460363812000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get products" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/products</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="set json" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="get products handler" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] == null) {
	var productsList = JSON.stringify(response[&quot;result&quot;]);
	vars.putObject(&quot;products&quot;, productsList);
	// ${__threadNum}
}
</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="error handler" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] != null) {
	OUT.println(&quot;get prodcuts, error - &quot;+ JSON.stringify(response[&quot;error&quot;])+&quot;, in thread - &quot;+ ${__threadNum});
}</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Add random products to cart" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">2</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get random product" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${BASE_URL}/product/${product_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="set json" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="find one random" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
var productsList = JSON.parse(vars.get(&quot;products&quot;));
var product = productsList[getRandomInt(0, productsList.length-1)];
vars.putObject(&quot;product_id&quot;, product[&quot;ID&quot;]);
vars.putObject(&quot;product&quot;, JSON.stringify(product));</stringProp>
            </BSFPreProcessor>
            <hashTree/>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="save product handler" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] == null) {
	var product = JSON.stringify(response[&quot;result&quot;]);
	vars.putObject(&quot;product&quot;, product);
	// ${__threadNum}
}
</stringProp>
            </BSFPostProcessor>
            <hashTree/>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="error handler" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] != null) {
	OUT.println(&quot;random product, error - &quot;+ JSON.stringify(response[&quot;error&quot;])+&quot;, in thread - &quot;+ ${__threadNum});
}</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add to cart" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${options}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${BASE_URL}/cart/item?pid=${product_id}&amp;qty=${qty}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="set json" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="build options" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">function getRandomInt(min, max) { return Math.floor(Math.random() * (max - min + 1)) + min; }
function randomProperty (obj) {
    var keys = Object.keys(obj);
    return obj[keys[ keys.length * Math.random() &lt;&lt; 0]];
}
function randomKey (obj) {
    var keys = Object.keys(obj);
    return keys[keys.length * Math.random() &lt;&lt; 0];
}

function getOptions(product) {
	var result = {};
	if (!product){	OUT.println(&quot;product not passed&quot;); return result;	}
	var options = product[&quot;options&quot;] || {};
	for (var optionName in options) {
		var option = options[optionName] || {};
		// this will trigger to make options only for required and with 50% for not required
		if (!option[&quot;required&quot;] &amp;&amp; Math.random() &gt;= 0.5) {continue;}

		var optionValue = &quot;&quot;;
		switch (option[&quot;type&quot;]){
			case &quot;field&quot;: 
			optionValue = &quot;dummyText&quot;;
			case &quot;date&quot;:
			optionValue = new Date().toJSON() || &quot;dummyDate&quot;;
			case &quot;select&quot;:
			optionValue = randomKey(option[&quot;options&quot;] || {}) || &quot;dummyProperty&quot;;
			case &quot;multi_select&quot;:
			optionValue = randomKey(option[&quot;options&quot;] || {}) || &quot;dummyProperty&quot;;
			case &quot;radio&quot;:
			optionValue = randomKey(option[&quot;options&quot;] || {}) || &quot;dummyProperty&quot;;
		}
		result[optionName] = optionValue;
	}
	
	return result;
}

// executed before assign as there can be isse 
if (!vars.get(&quot;product&quot;)) {
	var productsList = JSON.parse(vars.get(&quot;products&quot;));
	var product = productsList[getRandomInt(0, productsList.length)];
	vars.putObject(&quot;product_id&quot;, product[&quot;ID&quot;]);
	vars.putObject(&quot;product&quot;, JSON.stringify(product));
}

var product = JSON.parse(vars.get(&quot;product&quot;));
var options = getOptions(product);

vars.putObject(&quot;qty&quot;, JSON.stringify(2));
vars.putObject(&quot;options&quot;, JSON.stringify(options));</stringProp>
            </BSFPreProcessor>
            <hashTree/>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="add to cart handler" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] != null) {
	OUT.println(&quot;add to cart, error - &quot;+ JSON.stringify(response[&quot;error&quot;])+&quot;, in thread - &quot;+ ${__threadNum});
}</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Address" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1463487205000</longProp>
        <longProp name="ThreadGroup.end_time">1463487205000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create New Address" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${jsonData}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/visitor/address</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="get random address" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var addresses = vars.getObject(&quot;ADDRESSES&quot;);
var address = addresses[Math.floor((Math.random() * addresses.length))];

var visitor = JSON.parse(vars.getObject(&quot;visitorS&quot;));

if (visitor != null &amp;&amp; visitor.length &gt; 0) {
	address[&quot;visitor_id&quot;] = visitor[&quot;_id&quot;];
	address[&quot;first_name&quot;] = visitor[&quot;first_name&quot;];
	address[&quot;last_name&quot;] = visitor[&quot;last_name&quot;];
}

vars.putObject(&quot;address&quot;, JSON.stringify(address));
vars.putObject(&quot;jsonData&quot;, JSON.stringify(address));

// &quot;shipping_address&quot;:{&quot;zip_code&quot;:&quot;0000&quot;, &quot;address_line1&quot;:&quot;Test&quot;, &quot;company&quot;:&quot;Test&quot;, &quot;country&quot;:&quot;US&quot;, &quot;first_name&quot;:&quot;Test&quot;, &quot;last_name&quot;:&quot;One&quot;, &quot;address_line2&quot;:&quot;&quot;, &quot;city&quot;:&quot;Test&quot;, &quot;phone&quot;:&quot;123&quot;, &quot;sta// te&quot;:&quot;AL&quot;}</stringProp>
          </BSFPreProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="error handler" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] != null) {
	OUT.println(&quot;visitor, error - &quot;+ JSON.stringify(response[&quot;error&quot;])+&quot;, in thread - &quot;+ ${__threadNum});
}</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Save address to memo" enabled="true">
          <stringProp name="scriptLanguage">javascript</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">var addresses = vars.getObject(&quot;ADDRESSES&quot;);
var address = addresses[Math.floor((Math.random() * addresses.length))];

var visitor = JSON.parse(vars.getObject(&quot;visitorS&quot;));

if (visitor != null &amp;&amp; visitor.length &gt; 0) {
	address[&quot;visitor_id&quot;] = visitor[&quot;_id&quot;];
	address[&quot;first_name&quot;] = visitor[&quot;first_name&quot;];
	address[&quot;last_name&quot;] = visitor[&quot;last_name&quot;];
}

vars.putObject(&quot;address&quot;, JSON.stringify(address));</stringProp>
        </BSFSampler>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Checkout" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1460461975000</longProp>
        <longProp name="ThreadGroup.end_time">1460461975000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="APIS" enabled="false">
          <stringProp name="scriptLanguage">beanshell</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">///checkout {GET}
///checkout {PUT}
///checkout/billing/address {PUT}
///checkout/payment/method/:method {PUT}
///checkout/payment/methods {GET}
///checkout/shipping/address {PUT}
///checkout/shipping/method/:method/:rate {PUT}
///checkout/shipping/methods {GET}
///checkout/submit {POST}

Case guest:
put random shipping address (US)
put random billing address (US)

Case registered:
obtain and use saved

get shipping methods
put selected
get payment methods
put selected
submit


EASY:
Submit instantly using adrress/shipping/payment</stringProp>
        </BSFSampler>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get checkout" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/checkout</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="set json" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="select addresses (onestep)" enabled="true">
          <stringProp name="scriptLanguage">javascript</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">var address = JSON.parse(vars.getObject(&quot;address&quot;));
var requiredKeys = [&quot;country&quot;, &quot;state&quot;, &quot;zip_code&quot;, &quot;address_line1&quot;, &quot;first_name&quot;, &quot;last_name&quot;];
if (address == null) {
	var addresses = vars.getObject(&quot;ADDRESSES&quot;);
	var address = addresses[Math.floor((Math.random() * addresses.length))];
	
	var visitor = JSON.parse(vars.getObject(&quot;visitorS&quot;));
	
	if (visitor != null &amp;&amp; visitor.length &gt; 0) {
		address[&quot;visitor_id&quot;] = visitor[&quot;_id&quot;];
		address[&quot;first_name&quot;] = visitor[&quot;first_name&quot;];
		address[&quot;last_name&quot;] = visitor[&quot;last_name&quot;];
	}//{&quot;state&quot;:&quot;Al&quot;, &quot;zip_code&quot;:&quot;00000&quot;, &quot;address_line2&quot;:&quot;&quot;, &quot;company&quot;:&quot;S&quot;, &quot;country&quot;:&quot;US&quot;, &quot;last_name&quot;:&quot;One&quot;, &quot;phone&quot;:&quot;123&quot;, &quot;address_line1&quot;:&quot;Test&quot;, &quot;city&quot;:&quot;Test&quot;, &quot;first_name&quot;:&quot;Test&quot;}
}
// should make some values for required keys
function getValue (key) {
	return &quot;test&quot;;
}

for (var i = 0; i &lt; requiredKeys.length; i++){
	var key = requiredKeys[i];
	if (address[key] == null) {
		address[key] = getValue(key);
	}
}

vars.putObject(&quot;address&quot;, JSON.stringify(address));
var checkout = JSON.parse(vars.getObject(&quot;checkout&quot;)) || {};

checkout[&quot;shipping_address&quot;] = address;
checkout[&quot;billing_address&quot;] = address;
vars.putObject(&quot;checkout&quot;, JSON.stringify(checkout));</stringProp>
        </BSFSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="select shipping method  (onestep)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/checkout/shipping/methods</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="set json" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="handle shipping method selection" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] == null) {
	var shippingMethods = response[&quot;result&quot;];
	vars.putObject(&quot;shippingMethods&quot;, JSON.stringify(shippingMethods));

	// select shipping method and assign it to checkout
	var selectedShipping = &quot;flat_rate&quot;;
	var selectedShippingRate = &quot;default&quot;;
	
	for (var i = 0; i &lt; shippingMethods.length; i++){
		var shippingMethod = shippingMethods[i];
		var shippingMethodRates = shippingMethod[&quot;Rates&quot;];
		
		var rateFound = false;
		for (var j = 0; j &lt; shippingMethodRates.length; j++){
			var rate = shippingMethodRates[i][&quot;Code&quot;]
			if (rate != &quot;&quot;) {
				selectedShipping = shippingMethod[&quot;Code&quot;];
				selectedShippingRate = rate;
				rateFound = true;
				break;
			}
		}

		if (rateFound) {
			break;			
		}
	}
	
	var checkout = JSON.parse(vars.getObject(&quot;checkout&quot;)) || {};
	
	checkout[&quot;shipping_method&quot;] = selectedShipping;
	checkout[&quot;shipping_rate&quot;] = selectedShippingRate;
	vars.putObject(&quot;checkout&quot;, JSON.stringify(checkout));
}</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="error handler" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] != null) {
	OUT.println(&quot;checkout, error - &quot;+ JSON.stringify(response[&quot;error&quot;])+&quot;, in thread - &quot;+ ${__threadNum});
}</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="select payment method  (onestep)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/checkout/payment/methods</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="set json" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="handle payment selection" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] == null) {
	var paymentMethods = response[&quot;result&quot;];
	
	vars.putObject(&quot;paymentMethods&quot;, JSON.stringify(paymentMethods));

	// select shipping method and assign it to checkout
	var selectedPayment = &quot;checkmo&quot;;
	var ccPayment = false;
	
	//OUT.println(JSON.stringify(paymentMethods));
	
	for (var i = 0; i &lt; paymentMethods.length; i++){
		var paymentMethod = paymentMethods[i];
		var pType = paymentMethod[&quot;Type&quot;];
		
		if (pType == &quot;simple&quot;){
			selectedPayment = paymentMethod[&quot;Code&quot;];
			ccPayment = false;
			break;
		}
		

		if (pType == &quot;cc&quot;) {
			selectedPayment = paymentMethod[&quot;Code&quot;];
			ccPayment = true;
		}
	}
	
	// OUT.println(&quot;3 &quot;+selectedPayment);
	
	var checkout = JSON.parse(vars.getObject(&quot;checkout&quot;)) || {};
	if (ccPayment) {
		// add cc to checkout
		// &quot;cc&quot;:{&quot;type&quot;:&quot;VI&quot;, &quot;number&quot;:&quot;4111111111111111&quot;, &quot;expire_month&quot;:&quot;12&quot;, &quot;expire_year&quot;:&quot;2016&quot;}
		checkout[&quot;cc&quot;] = {
			&quot;type&quot;:&quot;VI&quot;,
			&quot;number&quot;:&quot;4111111111111111&quot;,
			&quot;expire_month&quot;:&quot;12&quot;,
			&quot;expire_year&quot;:&quot;2016&quot;,
			&quot;save&quot; : true
		}
	}
	
	checkout[&quot;payment_method&quot;] = selectedPayment;
	vars.putObject(&quot;checkout&quot;, JSON.stringify(checkout));
	//OUT.println(JSON.stringify(checkout));
}
// &quot;[{&quot;Name&quot;:&quot;Zero Amount Payment&quot;,&quot;Code&quot;:&quot;zeropay&quot;,&quot;Type&quot;:&quot;simple&quot;,&quot;Tokenable&quot;:false},{&quot;Name&quot;:&quot;Authorize.Net (Direct Post)&quot;,&quot;Code&quot;:&quot;authorizeNetDPM&quot;,&quot;Type&quot;:&quot;post_cc&quot;,&quot;Tokenable&quot;:false},{&quot;Name&quot;:&quot;Check/Money Order&quot;,&quot;Code&quot;:&quot;checkmo&quot;,&quot;Type&quot;:&quot;simple&quot;,&quot;Tokenable&quot;:false},{&quot;Name&quot;:&quot;PayPal&quot;,&quot;Code&quot;:&quot;paypal_express&quot;,&quot;Type&quot;:&quot;remote&quot;,&quot;Tokenable&quot;:false},{&quot;Name&quot;:&quot;Credit Card Direct Payment&quot;,&quot;Code&quot;:&quot;paypal_payflow&quot;,&quot;Type&quot;:&quot;cc&quot;,&quot;Tokenable&quot;:true}]&quot;</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="error handler" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] != null) {
	OUT.println(&quot;checkout, error - &quot;+ JSON.stringify(response[&quot;error&quot;])+&quot;, in thread - &quot;+ ${__threadNum});
}</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Checkout Submit  (onestep)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${jsonData}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/checkout/submit</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="set json" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">vars.putObject(&quot;jsonData&quot;, vars.getObject(&quot;checkout&quot;));


/*
{&quot;cc&quot;:{&quot;type&quot;:&quot;VI&quot;, &quot;number&quot;:&quot;4111111111111111&quot;, &quot;expire_month&quot;:&quot;12&quot;, &quot;expire_year&quot;:&quot;2016&quot;},
&quot;custom_info&quot;:{&quot;customer_email&quot;:&quot;test@i.ua&quot;, &quot;customer_name&quot;:&quot;Test One&quot;},
&quot;billing_address&quot;:{&quot;state&quot;:&quot;Al&quot;, &quot;zip_code&quot;:&quot;00000&quot;, &quot;address_line2&quot;:&quot;&quot;, &quot;company&quot;:&quot;S&quot;, &quot;country&quot;:&quot;US&quot;, &quot;last_name&quot;:&quot;One&quot;, &quot;phone&quot;:&quot;123&quot;, &quot;address_line1&quot;:&quot;Test&quot;, &quot;city&quot;:&quot;Test&quot;, &quot;first_name&quot;:&quot;Test&quot;},
&quot;shipping_address&quot;:{&quot;zip_code&quot;:&quot;0000&quot;, &quot;address_line1&quot;:&quot;Test&quot;, &quot;company&quot;:&quot;Test&quot;, &quot;country&quot;:&quot;US&quot;, &quot;first_name&quot;:&quot;Test&quot;, &quot;last_name&quot;:&quot;One&quot;, &quot;address_line2&quot;:&quot;&quot;, &quot;city&quot;:&quot;Test&quot;, &quot;phone&quot;:&quot;123&quot;, &quot;state&quot;:&quot;AL&quot;},
&quot;payment_method&quot;:&quot;paypal_payflow&quot;, &quot;shipping_method&quot;:&quot;flat_rate&quot;, &quot;shipping_rate&quot;:&quot;default&quot;}
 */</stringProp>
          </BSFPreProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

//vars.putObject(&quot;addressID&quot;, null);
//if (response[&quot;result&quot;] != null) {
//	vars.putObject(&quot;addressID&quot;, response[&quot;result&quot;][&quot;_id&quot;]);
//}
</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="error handler" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] != null) {
	OUT.println(&quot;checkout, error - &quot;+ JSON.stringify(response[&quot;error&quot;])+&quot;, in thread - &quot;+ ${__threadNum});
}</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Purcahse with registration" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">100</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1463741444000</longProp>
        <longProp name="ThreadGroup.end_time">1463741444000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="set json" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="rts visit" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{path: &quot;test-page-1&quot;, referrer: &quot;loolge.com&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/rts/visit</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="set json" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Register" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${jsonData}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/visitors/register</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="generate random visitor" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">function getRandomInt(min, max) {return Math.floor(Math.random() * (max - min + 1)) + min;}
function getPass(length) {	if (!length) {		length = 8;	}
	var charset = &quot;abcdefghijklnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;,
	n = charset.length
	result = &quot;&quot;;
	for (var i = 0; i &lt; length; i++) {
		result += charset.charAt(n*Math.random()&lt;&lt;0);
	}
    return result;
}

var domains=[&quot;@example.com&quot;, &quot;@example.org&quot;, &quot;@example.net&quot;]
var names=[&quot;Mack&quot;, &quot;Carlo&quot;, &quot;Luke&quot;, &quot;Isidra&quot;, &quot;Kathline&quot;, &quot;Alonso&quot;, &quot;Wenona&quot;, &quot;Lovetta&quot;, &quot;Yasuko&quot;, &quot;Kathlyn&quot;, &quot;Wei&quot;, &quot;Manuel&quot;, &quot;Maxine&quot;, &quot;Nikia&quot;, &quot;Charita&quot;, &quot;Derick&quot;, &quot;Miesha&quot;, &quot;Vertie&quot;, &quot;Stanford&quot;, &quot;Giuseppe&quot;, &quot;Eldridge&quot;, &quot;Cheree&quot;, &quot;Yolanda&quot;, &quot;Christeen&quot;, &quot;Olive&quot;, &quot;Lavona&quot;, &quot;Shaniqua&quot;, &quot;Rosio&quot;, &quot;Pandora&quot;, &quot;Claris&quot;, &quot;Jose&quot;, &quot;Willis&quot;, &quot;Lady&quot;, &quot;Natacha&quot;, &quot;Cristi&quot;, &quot;Gary&quot;, &quot;Jeanene&quot;, &quot;Esta&quot;, &quot;Delena&quot;, &quot;Suzi&quot;, &quot;Angelique&quot;, &quot;Hyon&quot;, &quot;Shera&quot;, &quot;Malinda&quot;, &quot;Florinda&quot;, &quot;Carry&quot;, &quot;Caroline&quot;, &quot;Evangeline&quot;, &quot;Jeanett&quot;, &quot;Judy&quot;, &quot;Kelley&quot;, &quot;Kimbery&quot;, &quot;Sherwood&quot;, &quot;Christin&quot;, &quot;Felix&quot;, &quot;Collin&quot;, &quot;Makeda&quot;, &quot;Melani&quot;, &quot;Chau&quot;, &quot;Eleni&quot;, &quot;Senaida&quot;, &quot;Jolynn&quot;, &quot;Candace&quot;, &quot;Myrtice&quot;, &quot;Delana&quot;, &quot;Lynell&quot;, &quot;Dave&quot;, &quot;Wan&quot;, &quot;Angelia&quot;, &quot;Leena&quot;, &quot;Stephane&quot;, &quot;Lekisha&quot;, &quot;Carlene&quot;, &quot;Alice&quot;, &quot;Merideth&quot;, &quot;Antony&quot;, &quot;Ginger&quot;, &quot;Jennie&quot;, &quot;Kimber&quot;, &quot;Ai&quot;, &quot;Ladawn&quot;, &quot;Deandrea&quot;, &quot;Alyssa&quot;, &quot;Sommer&quot;, &quot;Mitchel&quot;, &quot;Kesha&quot;, &quot;Dalene&quot;, &quot;Cody&quot;, &quot;Errol&quot;, &quot;Christen&quot;, &quot;Carman&quot;, &quot;Kaye&quot;, &quot;Maximina&quot;, &quot;Alverta&quot;, &quot;Delinda&quot;, &quot;Lurlene&quot;, &quot;Almeda&quot;, &quot;Adelaide&quot;];
var lastNames=[&quot;Moorhouse&quot;, &quot;Casella&quot;, &quot;Leaman&quot;, &quot;Infante&quot;, &quot;Kang&quot;, &quot;Andreotti&quot;, &quot;Weatherspoon&quot;, &quot;Leicht&quot;, &quot;Yowell&quot;, &quot;Kanode&quot;, &quot;Waag&quot;, &quot;Maya&quot;, &quot;Michalik&quot;, &quot;Natera&quot;, &quot;Cueva&quot;, &quot;Delarosa&quot;, &quot;Macey&quot;, &quot;Volpe&quot;, &quot;Staller&quot;, &quot;Gin&quot;, &quot;Espiritu&quot;, &quot;Chivers&quot;, &quot;Yankey&quot;, &quot;Carpenter&quot;, &quot;Okafor&quot;, &quot;Landsman&quot;, &quot;Sheen&quot;, &quot;Rosenfeld&quot;, &quot;Prine&quot;, &quot;Carstensen&quot;, &quot;Jiang&quot;, &quot;Warner&quot;, &quot;Lanterman&quot;, &quot;Nowicki&quot;, &quot;Chittenden&quot;, &quot;Gash&quot;, &quot;Jimerson&quot;, &quot;Edgecomb&quot;, &quot;Demaris&quot;, &quot;Sevigny&quot;, &quot;Ayon&quot;, &quot;Hennis&quot;, &quot;Sapienza&quot;, &quot;Manwaring&quot;, &quot;Faul&quot;, &quot;Crooms&quot;, &quot;Casey&quot;, &quot;Eskridge&quot;, &quot;Julian&quot;, &quot;Jacobsen&quot;, &quot;Knopp&quot;, &quot;Kruger&quot;, &quot;Stoops&quot;, &quot;Conley&quot;, &quot;Fordyce&quot;, &quot;Croce&quot;, &quot;Mccarley&quot;, &quot;Mckeon&quot;, &quot;Check&quot;, &quot;Evitt&quot;, &quot;Schumacher&quot;, &quot;Jacko&quot;, &quot;Catto&quot;, &quot;Mayor&quot;, &quot;Daum&quot;, &quot;Linde&quot;, &quot;Nauman&quot;, &quot;Dempster&quot;, &quot;Wynn&quot;, &quot;Sperry&quot;, &quot;Alvey&quot;, &quot;Larock&quot;, &quot;Stimson&quot;, &quot;Leveque&quot;, &quot;Cassel&quot;, &quot;Abalos&quot;, &quot;Myerson&quot;, &quot;Abe&quot;, &quot;Gillock&quot;, &quot;Jessop&quot;, &quot;Kendra&quot;, &quot;Arebalo&quot;, &quot;Lipinski&quot;, &quot;Doody&quot;, &quot;Acker&quot;, &quot;Schuch&quot;, &quot;Masser&quot;, &quot;Kopecky&quot;, &quot;Devore&quot;, &quot;Cannady&quot;, &quot;Egnor&quot;, &quot;Celestine&quot;, &quot;Cogburn&quot;, &quot;Kissel&quot;, &quot;Mccarron&quot;, &quot;Ables&quot;, &quot;Denney&quot;, &quot;Loh&quot;, &quot;Audette&quot;, &quot;Angers&quot;];

var n = names.length;
var fname = names[n*Math.random()&lt;&lt;0];
n = lastNames.length;
var lname = names[n*Math.random()&lt;&lt;0];
n = 999;
var email = fname + lname + (n*Math.random()&lt;&lt;0) + domains[0];
var password = getPass();
var visitor = {
	&quot;fname&quot;: fname,
	&quot;lname&quot;: lname,
	&quot;email&quot;: email,
	&quot;password&quot;: password
};
vars.putObject(&quot;email&quot;, email);
vars.putObject(&quot;password&quot;, password);
vars.putObject(&quot;visitor&quot;, JSON.stringify(visitor));
vars.putObject(&quot;jsonData&quot;, JSON.stringify(visitor));
// {&quot;email&quot;: &quot;${email}&quot;,&quot;password&quot;: &quot;${password}&quot;,&quot;fname&quot;: &quot;${fname}&quot;,&quot;lname&quot;: &quot;${lname}&quot;}
// {&quot;facebook_id&quot;:&quot;&quot;,&quot;google_id&quot;:&quot;&quot;,&quot;email&quot;:&quot;b@i.ua&quot;,&quot;fname&quot;:&quot;A&quot;,&quot;lname&quot;:&quot;B&quot;,&quot;password&quot;:&quot;123123123&quot;}
</stringProp>
          </BSFPreProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="save visitor" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] == null) {
	var visitorSaved = response[&quot;result&quot;];
	vars.putObject(&quot;visitorS&quot;, JSON.stringify(visitorSaved));

	var visitorID = visitorSaved[&quot;_id&quot;] || visitorSaved[&quot;id&quot;];
	vars.putObject(&quot;visitor_id&quot;, visitorID);
}</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="error handler" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] != null) {
	OUT.println(&quot;visitor, error - &quot;+ JSON.stringify(response[&quot;error&quot;])+&quot;, in thread - &quot;+ ${__threadNum});
}</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Log out (storefront)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/visit/logout</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="error handler" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] != null) {
	OUT.println(&quot;visitor, error - &quot;+ JSON.stringify(response[&quot;error&quot;])+&quot;, in thread - &quot;+ ${__threadNum});
}</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Log in (storefront)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;email&quot;: &quot;${email}&quot;,&quot;password&quot;: &quot;${password}&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/visit/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="error handler" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] != null) {
	OUT.println(&quot;visitor, error - &quot;+ JSON.stringify(response[&quot;error&quot;])+&quot;, in thread - &quot;+ ${__threadNum});
}</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get visitor info" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/visit</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

vars.putObject(&quot;visitorID&quot;, null);
if (response[&quot;result&quot;] != null) {
	var result = response[&quot;result&quot;];
	vars.putObject(&quot;visitorID&quot;, result[&quot;_id&quot;]);
}
// /visitor/:visitorID</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="error handler" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] != null) {
	OUT.println(&quot;visitor, error - &quot;+ JSON.stringify(response[&quot;error&quot;])+&quot;, in thread - &quot;+ ${__threadNum});
}</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get products" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/products</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="get products handler" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] == null) {
	var productsList = JSON.stringify(response[&quot;result&quot;]);
	vars.putObject(&quot;products&quot;, productsList);
	// ${__threadNum}
}
</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="error handler" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] != null) {
	OUT.println(&quot;get prodcuts, error - &quot;+ JSON.stringify(response[&quot;error&quot;])+&quot;, in thread - &quot;+ ${__threadNum});
}</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">3</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get random product" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${BASE_URL}/product/${product_id}</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="find one random" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}
var productsList = JSON.parse(vars.get(&quot;products&quot;));
var product = productsList[getRandomInt(0, productsList.length-1)];
vars.putObject(&quot;product_id&quot;, product[&quot;ID&quot;]);
vars.putObject(&quot;product&quot;, JSON.stringify(product));</stringProp>
            </BSFPreProcessor>
            <hashTree/>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="save product handler" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] == null) {
	var product = JSON.stringify(response[&quot;result&quot;]);
	vars.putObject(&quot;product&quot;, product);
	// ${__threadNum}
}
</stringProp>
            </BSFPostProcessor>
            <hashTree/>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="error handler" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] != null) {
	OUT.println(&quot;random product, error - &quot;+ JSON.stringify(response[&quot;error&quot;])+&quot;, in thread - &quot;+ ${__threadNum});
}</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add to cart" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${options}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">${BASE_URL}/cart/item?pid=${product_id}&amp;qty=${qty}</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <boolProp name="HTTPSampler.monitor">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="build options" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">function getRandomInt(min, max) { return Math.floor(Math.random() * (max - min + 1)) + min; }
function randomProperty (obj) {
    var keys = Object.keys(obj);
    return obj[keys[ keys.length * Math.random() &lt;&lt; 0]];
}
function randomKey (obj) {
    var keys = Object.keys(obj);
    return keys[keys.length * Math.random() &lt;&lt; 0];
}

function getOptions(product) {
	var result = {};
	if (!product){	OUT.println(&quot;product not passed&quot;); return result;	}
	var options = product[&quot;options&quot;] || {};
	for (var optionName in options) {
		var option = options[optionName] || {};
		// this will trigger to make options only for required and with 50% for not required
		if (!option[&quot;required&quot;] &amp;&amp; Math.random() &gt;= 0.5) {continue;}

		var optionValue = &quot;&quot;;
		switch (option[&quot;type&quot;]){
			case &quot;field&quot;: 
			optionValue = &quot;dummyText&quot;;
			case &quot;date&quot;:
			optionValue = new Date().toJSON() || &quot;dummyDate&quot;;
			case &quot;select&quot;:
			optionValue = randomKey(option[&quot;options&quot;] || {}) || &quot;dummyProperty&quot;;
			case &quot;multi_select&quot;:
			optionValue = randomKey(option[&quot;options&quot;] || {}) || &quot;dummyProperty&quot;;
			case &quot;radio&quot;:
			optionValue = randomKey(option[&quot;options&quot;] || {}) || &quot;dummyProperty&quot;;
		}
		result[optionName] = optionValue;
	}
	
	return result;
}

// executed before assign as there can be isse 
if (!vars.get(&quot;product&quot;)) {
	var productsList = JSON.parse(vars.get(&quot;products&quot;));
	var product = productsList[getRandomInt(0, productsList.length)];
	vars.putObject(&quot;product_id&quot;, product[&quot;ID&quot;]);
	vars.putObject(&quot;product&quot;, JSON.stringify(product));
}

var product = JSON.parse(vars.get(&quot;product&quot;));
var options = getOptions(product);

vars.putObject(&quot;qty&quot;, JSON.stringify(2));
vars.putObject(&quot;options&quot;, JSON.stringify(options));</stringProp>
            </BSFPreProcessor>
            <hashTree/>
            <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="add to cart handler" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] != null) {
	OUT.println(&quot;add to cart, error - &quot;+ JSON.stringify(response[&quot;error&quot;])+&quot;, in thread - &quot;+ ${__threadNum});
}
</stringProp>
            </BSFPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get checkout" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/checkout</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="set json" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
        <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="select addresses (onestep)" enabled="true">
          <stringProp name="scriptLanguage">javascript</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">var address = JSON.parse(vars.getObject(&quot;address&quot;));
var requiredKeys = [&quot;country&quot;, &quot;state&quot;, &quot;zip_code&quot;, &quot;address_line1&quot;, &quot;first_name&quot;, &quot;last_name&quot;];
if (address == null) {
	var addresses = vars.getObject(&quot;ADDRESSES&quot;);
	var address = addresses[Math.floor((Math.random() * addresses.length))];
	
	var visitor = JSON.parse(vars.getObject(&quot;visitorS&quot;));
	
	if (visitor != null &amp;&amp; visitor.length &gt; 0) {
		address[&quot;visitor_id&quot;] = visitor[&quot;_id&quot;];
		address[&quot;first_name&quot;] = visitor[&quot;first_name&quot;];
		address[&quot;last_name&quot;] = visitor[&quot;last_name&quot;];
	}//{&quot;state&quot;:&quot;Al&quot;, &quot;zip_code&quot;:&quot;00000&quot;, &quot;address_line2&quot;:&quot;&quot;, &quot;company&quot;:&quot;S&quot;, &quot;country&quot;:&quot;US&quot;, &quot;last_name&quot;:&quot;One&quot;, &quot;phone&quot;:&quot;123&quot;, &quot;address_line1&quot;:&quot;Test&quot;, &quot;city&quot;:&quot;Test&quot;, &quot;first_name&quot;:&quot;Test&quot;}
}
// should make some values for required keys
function getValue (key) {
	return &quot;test&quot;;
}

for (var i = 0; i &lt; requiredKeys.length; i++){
	var key = requiredKeys[i];
	if (address[key] == null) {
		address[key] = getValue(key);
	}
}

vars.putObject(&quot;address&quot;, JSON.stringify(address));
var checkout = JSON.parse(vars.getObject(&quot;checkout&quot;)) || {};

checkout[&quot;shipping_address&quot;] = address;
checkout[&quot;billing_address&quot;] = address;
vars.putObject(&quot;checkout&quot;, JSON.stringify(checkout));</stringProp>
        </BSFSampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="select shipping method  (onestep)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/checkout/shipping/methods</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="set json" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="handle shipping method selection" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] == null) {
	var shippingMethods = response[&quot;result&quot;];
	vars.putObject(&quot;shippingMethods&quot;, JSON.stringify(shippingMethods));

	// select shipping method and assign it to checkout
	var selectedShipping = &quot;flat_rate&quot;;
	var selectedShippingRate = &quot;default&quot;;
	
	
	for (var i = 0; i &lt; shippingMethods.length; i++){
		var shippingMethod = shippingMethods[i];
		var shippingMethodRates = shippingMethod[&quot;Rates&quot;] || [];
		
		var rateFound = false;
		for (var j = 0; j &lt; shippingMethodRates.length; j++){
			var rate = shippingMethodRates[j][&quot;Code&quot;] || &quot;&quot;;
			if (rate != &quot;&quot;) {
				selectedShipping = shippingMethod[&quot;Code&quot;];
				selectedShippingRate = rate;
				rateFound = true;
				break;
			}
		}

		if (rateFound) {
			break;			
		}
	}
	
	var checkout = JSON.parse(vars.getObject(&quot;checkout&quot;)) || {};
	
	checkout[&quot;shipping_method&quot;] = selectedShipping;
	checkout[&quot;shipping_rate&quot;] = selectedShippingRate;
	vars.putObject(&quot;checkout&quot;, JSON.stringify(checkout));
}</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="error handler" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] != null) {
	OUT.println(&quot;checkout, error - &quot;+ JSON.stringify(response[&quot;error&quot;])+&quot;, in thread - &quot;+ ${__threadNum});
}</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="select payment method  (onestep)" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/checkout/payment/methods</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="set json" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="handle payment selection" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] == null) {
	var paymentMethods = response[&quot;result&quot;];
	
	vars.putObject(&quot;paymentMethods&quot;, JSON.stringify(paymentMethods));

	// select shipping method and assign it to checkout
	var selectedPayment = &quot;checkmo&quot;;
	var ccPayment = false;
	
	//OUT.println(JSON.stringify(paymentMethods));
	
	for (var i = 0; i &lt; paymentMethods.length; i++){
		var paymentMethod = paymentMethods[i];
		var pType = paymentMethod[&quot;Type&quot;];
		
		if (pType == &quot;simple&quot;){
			selectedPayment = paymentMethod[&quot;Code&quot;];
			ccPayment = false;
			break;
		}
		

		if (pType == &quot;cc&quot;) {
			selectedPayment = paymentMethod[&quot;Code&quot;];
			ccPayment = true;
		}
	}
	
	// OUT.println(&quot;3 &quot;+selectedPayment);
	
	var checkout = JSON.parse(vars.getObject(&quot;checkout&quot;)) || {};
	if (ccPayment) {
		// add cc to checkout
		// &quot;cc&quot;:{&quot;type&quot;:&quot;VI&quot;, &quot;number&quot;:&quot;4111111111111111&quot;, &quot;expire_month&quot;:&quot;12&quot;, &quot;expire_year&quot;:&quot;2016&quot;}
		checkout[&quot;cc&quot;] = {
			&quot;type&quot;:&quot;VI&quot;,
			&quot;number&quot;:&quot;4111111111111111&quot;,
			&quot;expire_month&quot;:&quot;12&quot;,
			&quot;expire_year&quot;:&quot;2016&quot;,
			&quot;save&quot; : true
		}
	}
	
	checkout[&quot;payment_method&quot;] = selectedPayment;
	vars.putObject(&quot;checkout&quot;, JSON.stringify(checkout));
	//OUT.println(JSON.stringify(checkout));
}
// &quot;[{&quot;Name&quot;:&quot;Zero Amount Payment&quot;,&quot;Code&quot;:&quot;zeropay&quot;,&quot;Type&quot;:&quot;simple&quot;,&quot;Tokenable&quot;:false},{&quot;Name&quot;:&quot;Authorize.Net (Direct Post)&quot;,&quot;Code&quot;:&quot;authorizeNetDPM&quot;,&quot;Type&quot;:&quot;post_cc&quot;,&quot;Tokenable&quot;:false},{&quot;Name&quot;:&quot;Check/Money Order&quot;,&quot;Code&quot;:&quot;checkmo&quot;,&quot;Type&quot;:&quot;simple&quot;,&quot;Tokenable&quot;:false},{&quot;Name&quot;:&quot;PayPal&quot;,&quot;Code&quot;:&quot;paypal_express&quot;,&quot;Type&quot;:&quot;remote&quot;,&quot;Tokenable&quot;:false},{&quot;Name&quot;:&quot;Credit Card Direct Payment&quot;,&quot;Code&quot;:&quot;paypal_payflow&quot;,&quot;Type&quot;:&quot;cc&quot;,&quot;Tokenable&quot;:true}]&quot;</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="error handler" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] != null) {
	OUT.println(&quot;checkout, error - &quot;+ JSON.stringify(response[&quot;error&quot;])+&quot;, in thread - &quot;+ ${__threadNum});
}</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Checkout Submit  (onestep)" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${jsonData}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${BASE_URL}/checkout/submit</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <boolProp name="HTTPSampler.BROWSER_COMPATIBLE_MULTIPART">true</boolProp>
          <boolProp name="HTTPSampler.monitor">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="set json" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <BSFPreProcessor guiclass="TestBeanGUI" testclass="BSFPreProcessor" testname="BSF PreProcessor" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">vars.putObject(&quot;jsonData&quot;, vars.getObject(&quot;checkout&quot;));


/*
{&quot;cc&quot;:{&quot;type&quot;:&quot;VI&quot;, &quot;number&quot;:&quot;4111111111111111&quot;, &quot;expire_month&quot;:&quot;12&quot;, &quot;expire_year&quot;:&quot;2016&quot;},
&quot;custom_info&quot;:{&quot;customer_email&quot;:&quot;test@i.ua&quot;, &quot;customer_name&quot;:&quot;Test One&quot;},
&quot;billing_address&quot;:{&quot;state&quot;:&quot;Al&quot;, &quot;zip_code&quot;:&quot;00000&quot;, &quot;address_line2&quot;:&quot;&quot;, &quot;company&quot;:&quot;S&quot;, &quot;country&quot;:&quot;US&quot;, &quot;last_name&quot;:&quot;One&quot;, &quot;phone&quot;:&quot;123&quot;, &quot;address_line1&quot;:&quot;Test&quot;, &quot;city&quot;:&quot;Test&quot;, &quot;first_name&quot;:&quot;Test&quot;},
&quot;shipping_address&quot;:{&quot;zip_code&quot;:&quot;0000&quot;, &quot;address_line1&quot;:&quot;Test&quot;, &quot;company&quot;:&quot;Test&quot;, &quot;country&quot;:&quot;US&quot;, &quot;first_name&quot;:&quot;Test&quot;, &quot;last_name&quot;:&quot;One&quot;, &quot;address_line2&quot;:&quot;&quot;, &quot;city&quot;:&quot;Test&quot;, &quot;phone&quot;:&quot;123&quot;, &quot;state&quot;:&quot;AL&quot;},
&quot;payment_method&quot;:&quot;paypal_payflow&quot;, &quot;shipping_method&quot;:&quot;flat_rate&quot;, &quot;shipping_rate&quot;:&quot;default&quot;}
 */</stringProp>
          </BSFPreProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="BSF PostProcessor" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

//vars.putObject(&quot;addressID&quot;, null);
//if (response[&quot;result&quot;] != null) {
//	vars.putObject(&quot;addressID&quot;, response[&quot;result&quot;][&quot;_id&quot;]);
//}
</stringProp>
          </BSFPostProcessor>
          <hashTree/>
          <BSFPostProcessor guiclass="TestBeanGUI" testclass="BSFPostProcessor" testname="error handler" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">var response = JSON.parse(prev.getResponseDataAsString());

if (response[&quot;error&quot;] != null) {
	OUT.println(&quot;checkout, error - &quot;+ JSON.stringify(response[&quot;error&quot;])+&quot;, in thread - &quot;+ ${__threadNum});
}</stringProp>
          </BSFPostProcessor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <objProp>
            <name></name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <objProp>
            <name></name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="StatGraphVisualizer" testclass="ResultCollector" testname="Aggregate Graph" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
